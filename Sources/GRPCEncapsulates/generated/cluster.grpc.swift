// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: cluster.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - event_store.cluster.Gossip

/// Namespace containing generated types for the "event_store.cluster.Gossip" service.
package enum EventStore_Cluster_Gossip {
    /// Service descriptor for the "event_store.cluster.Gossip" service.
    package static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.cluster.Gossip")
    /// Namespace for method metadata.
    package enum Method {
        /// Namespace for "Update" metadata.
        package enum Update {
            /// Request type for "Update".
            package typealias Input = EventStore_Cluster_GossipRequest
            /// Response type for "Update".
            package typealias Output = EventStore_Cluster_ClusterInfo
            /// Descriptor for "Update".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.cluster.Gossip"),
                method: "Update"
            )
        }
        /// Namespace for "Read" metadata.
        package enum Read {
            /// Request type for "Read".
            package typealias Input = EventStore_Client_Empty
            /// Response type for "Read".
            package typealias Output = EventStore_Cluster_ClusterInfo
            /// Descriptor for "Read".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.cluster.Gossip"),
                method: "Read"
            )
        }
        /// Descriptors for all methods in the "event_store.cluster.Gossip" service.
        package static let descriptors: [GRPCCore.MethodDescriptor] = [
            Update.descriptor,
            Read.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "event_store.cluster.Gossip" service.
    package static let eventStore_cluster_Gossip = GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.cluster.Gossip")
}

// MARK: event_store.cluster.Gossip (server)

extension EventStore_Cluster_Gossip {
    /// Streaming variant of the service protocol for the "event_store.cluster.Gossip" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    package protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Cluster_GossipRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Cluster_ClusterInfo` messages.
        func update(
            request: GRPCCore.StreamingServerRequest<EventStore_Cluster_GossipRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Cluster_ClusterInfo>

        /// Handle the "Read" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_Empty` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Cluster_ClusterInfo` messages.
        func read(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_Empty>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Cluster_ClusterInfo>
    }

    /// Service protocol for the "event_store.cluster.Gossip" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    package protocol ServiceProtocol: EventStore_Cluster_Gossip.StreamingServiceProtocol {
        /// Handle the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_GossipRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Cluster_ClusterInfo` message.
        func update(
            request: GRPCCore.ServerRequest<EventStore_Cluster_GossipRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Cluster_ClusterInfo>

        /// Handle the "Read" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Empty` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Cluster_ClusterInfo` message.
        func read(
            request: GRPCCore.ServerRequest<EventStore_Client_Empty>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Cluster_ClusterInfo>
    }

    /// Simple service protocol for the "event_store.cluster.Gossip" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    package protocol SimpleServiceProtocol: EventStore_Cluster_Gossip.ServiceProtocol {
        /// Handle the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Cluster_GossipRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Cluster_ClusterInfo` to respond with.
        func update(
            request: EventStore_Cluster_GossipRequest,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Cluster_ClusterInfo

        /// Handle the "Read" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_Empty` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Cluster_ClusterInfo` to respond with.
        func read(
            request: EventStore_Client_Empty,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Cluster_ClusterInfo
    }
}

// Default implementation of 'registerMethods(with:)'.
extension EventStore_Cluster_Gossip.StreamingServiceProtocol {
    package func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: EventStore_Cluster_Gossip.Method.Update.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Cluster_GossipRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Cluster_ClusterInfo>(),
            handler: { request, context in
                try await self.update(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Cluster_Gossip.Method.Read.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Empty>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Cluster_ClusterInfo>(),
            handler: { request, context in
                try await self.read(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension EventStore_Cluster_Gossip.ServiceProtocol {
    package func update(
        request: GRPCCore.StreamingServerRequest<EventStore_Cluster_GossipRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Cluster_ClusterInfo> {
        let response = try await self.update(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    package func read(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_Empty>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Cluster_ClusterInfo> {
        let response = try await self.read(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension EventStore_Cluster_Gossip.SimpleServiceProtocol {
    package func update(
        request: GRPCCore.ServerRequest<EventStore_Cluster_GossipRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Cluster_ClusterInfo> {
        return GRPCCore.ServerResponse<EventStore_Cluster_ClusterInfo>(
            message: try await self.update(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    package func read(
        request: GRPCCore.ServerRequest<EventStore_Client_Empty>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Cluster_ClusterInfo> {
        return GRPCCore.ServerResponse<EventStore_Cluster_ClusterInfo>(
            message: try await self.read(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: event_store.cluster.Gossip (client)

extension EventStore_Cluster_Gossip {
    /// Generated client protocol for the "event_store.cluster.Gossip" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    package protocol ClientProtocol: Sendable {
        /// Call the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_GossipRequest` message.
        ///   - serializer: A serializer for `EventStore_Cluster_GossipRequest` messages.
        ///   - deserializer: A deserializer for `EventStore_Cluster_ClusterInfo` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func update<Result>(
            request: GRPCCore.ClientRequest<EventStore_Cluster_GossipRequest>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Cluster_GossipRequest>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Cluster_ClusterInfo>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Cluster_ClusterInfo>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Read" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Empty` message.
        ///   - serializer: A serializer for `EventStore_Client_Empty` messages.
        ///   - deserializer: A deserializer for `EventStore_Cluster_ClusterInfo` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func read<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Empty>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Empty>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Cluster_ClusterInfo>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Cluster_ClusterInfo>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "event_store.cluster.Gossip" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    package struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        package init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_GossipRequest` message.
        ///   - serializer: A serializer for `EventStore_Cluster_GossipRequest` messages.
        ///   - deserializer: A deserializer for `EventStore_Cluster_ClusterInfo` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func update<Result>(
            request: GRPCCore.ClientRequest<EventStore_Cluster_GossipRequest>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Cluster_GossipRequest>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Cluster_ClusterInfo>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Cluster_ClusterInfo>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Cluster_Gossip.Method.Update.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Read" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Empty` message.
        ///   - serializer: A serializer for `EventStore_Client_Empty` messages.
        ///   - deserializer: A deserializer for `EventStore_Cluster_ClusterInfo` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func read<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Empty>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Empty>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Cluster_ClusterInfo>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Cluster_ClusterInfo>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Cluster_Gossip.Method.Read.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension EventStore_Cluster_Gossip.ClientProtocol {
    /// Call the "Update" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Cluster_GossipRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func update<Result>(
        request: GRPCCore.ClientRequest<EventStore_Cluster_GossipRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Cluster_ClusterInfo>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.update(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Cluster_GossipRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Cluster_ClusterInfo>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Read" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_Empty` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func read<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Cluster_ClusterInfo>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.read(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Empty>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Cluster_ClusterInfo>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension EventStore_Cluster_Gossip.ClientProtocol {
    /// Call the "Update" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func update<Result>(
        _ message: EventStore_Cluster_GossipRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Cluster_ClusterInfo>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Cluster_GossipRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.update(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Read" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func read<Result>(
        _ message: EventStore_Client_Empty,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Cluster_ClusterInfo>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_Empty>(
            message: message,
            metadata: metadata
        )
        return try await self.read(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}

// MARK: - event_store.cluster.Elections

/// Namespace containing generated types for the "event_store.cluster.Elections" service.
package enum EventStore_Cluster_Elections {
    /// Service descriptor for the "event_store.cluster.Elections" service.
    package static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.cluster.Elections")
    /// Namespace for method metadata.
    package enum Method {
        /// Namespace for "ViewChange" metadata.
        package enum ViewChange {
            /// Request type for "ViewChange".
            package typealias Input = EventStore_Cluster_ViewChangeRequest
            /// Response type for "ViewChange".
            package typealias Output = EventStore_Client_Empty
            /// Descriptor for "ViewChange".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.cluster.Elections"),
                method: "ViewChange"
            )
        }
        /// Namespace for "ViewChangeProof" metadata.
        package enum ViewChangeProof {
            /// Request type for "ViewChangeProof".
            package typealias Input = EventStore_Cluster_ViewChangeProofRequest
            /// Response type for "ViewChangeProof".
            package typealias Output = EventStore_Client_Empty
            /// Descriptor for "ViewChangeProof".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.cluster.Elections"),
                method: "ViewChangeProof"
            )
        }
        /// Namespace for "Prepare" metadata.
        package enum Prepare {
            /// Request type for "Prepare".
            package typealias Input = EventStore_Cluster_PrepareRequest
            /// Response type for "Prepare".
            package typealias Output = EventStore_Client_Empty
            /// Descriptor for "Prepare".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.cluster.Elections"),
                method: "Prepare"
            )
        }
        /// Namespace for "PrepareOk" metadata.
        package enum PrepareOk {
            /// Request type for "PrepareOk".
            package typealias Input = EventStore_Cluster_PrepareOkRequest
            /// Response type for "PrepareOk".
            package typealias Output = EventStore_Client_Empty
            /// Descriptor for "PrepareOk".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.cluster.Elections"),
                method: "PrepareOk"
            )
        }
        /// Namespace for "Proposal" metadata.
        package enum Proposal {
            /// Request type for "Proposal".
            package typealias Input = EventStore_Cluster_ProposalRequest
            /// Response type for "Proposal".
            package typealias Output = EventStore_Client_Empty
            /// Descriptor for "Proposal".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.cluster.Elections"),
                method: "Proposal"
            )
        }
        /// Namespace for "Accept" metadata.
        package enum Accept {
            /// Request type for "Accept".
            package typealias Input = EventStore_Cluster_AcceptRequest
            /// Response type for "Accept".
            package typealias Output = EventStore_Client_Empty
            /// Descriptor for "Accept".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.cluster.Elections"),
                method: "Accept"
            )
        }
        /// Namespace for "LeaderIsResigning" metadata.
        package enum LeaderIsResigning {
            /// Request type for "LeaderIsResigning".
            package typealias Input = EventStore_Cluster_LeaderIsResigningRequest
            /// Response type for "LeaderIsResigning".
            package typealias Output = EventStore_Client_Empty
            /// Descriptor for "LeaderIsResigning".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.cluster.Elections"),
                method: "LeaderIsResigning"
            )
        }
        /// Namespace for "LeaderIsResigningOk" metadata.
        package enum LeaderIsResigningOk {
            /// Request type for "LeaderIsResigningOk".
            package typealias Input = EventStore_Cluster_LeaderIsResigningOkRequest
            /// Response type for "LeaderIsResigningOk".
            package typealias Output = EventStore_Client_Empty
            /// Descriptor for "LeaderIsResigningOk".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.cluster.Elections"),
                method: "LeaderIsResigningOk"
            )
        }
        /// Descriptors for all methods in the "event_store.cluster.Elections" service.
        package static let descriptors: [GRPCCore.MethodDescriptor] = [
            ViewChange.descriptor,
            ViewChangeProof.descriptor,
            Prepare.descriptor,
            PrepareOk.descriptor,
            Proposal.descriptor,
            Accept.descriptor,
            LeaderIsResigning.descriptor,
            LeaderIsResigningOk.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "event_store.cluster.Elections" service.
    package static let eventStore_cluster_Elections = GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.cluster.Elections")
}

// MARK: event_store.cluster.Elections (server)

extension EventStore_Cluster_Elections {
    /// Streaming variant of the service protocol for the "event_store.cluster.Elections" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    package protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "ViewChange" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Cluster_ViewChangeRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Empty` messages.
        func viewChange(
            request: GRPCCore.StreamingServerRequest<EventStore_Cluster_ViewChangeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty>

        /// Handle the "ViewChangeProof" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Cluster_ViewChangeProofRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Empty` messages.
        func viewChangeProof(
            request: GRPCCore.StreamingServerRequest<EventStore_Cluster_ViewChangeProofRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty>

        /// Handle the "Prepare" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Cluster_PrepareRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Empty` messages.
        func prepare(
            request: GRPCCore.StreamingServerRequest<EventStore_Cluster_PrepareRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty>

        /// Handle the "PrepareOk" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Cluster_PrepareOkRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Empty` messages.
        func prepareOk(
            request: GRPCCore.StreamingServerRequest<EventStore_Cluster_PrepareOkRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty>

        /// Handle the "Proposal" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Cluster_ProposalRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Empty` messages.
        func proposal(
            request: GRPCCore.StreamingServerRequest<EventStore_Cluster_ProposalRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty>

        /// Handle the "Accept" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Cluster_AcceptRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Empty` messages.
        func accept(
            request: GRPCCore.StreamingServerRequest<EventStore_Cluster_AcceptRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty>

        /// Handle the "LeaderIsResigning" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Cluster_LeaderIsResigningRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Empty` messages.
        func leaderIsResigning(
            request: GRPCCore.StreamingServerRequest<EventStore_Cluster_LeaderIsResigningRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty>

        /// Handle the "LeaderIsResigningOk" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Cluster_LeaderIsResigningOkRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Empty` messages.
        func leaderIsResigningOk(
            request: GRPCCore.StreamingServerRequest<EventStore_Cluster_LeaderIsResigningOkRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty>
    }

    /// Service protocol for the "event_store.cluster.Elections" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    package protocol ServiceProtocol: EventStore_Cluster_Elections.StreamingServiceProtocol {
        /// Handle the "ViewChange" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_ViewChangeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Empty` message.
        func viewChange(
            request: GRPCCore.ServerRequest<EventStore_Cluster_ViewChangeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty>

        /// Handle the "ViewChangeProof" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_ViewChangeProofRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Empty` message.
        func viewChangeProof(
            request: GRPCCore.ServerRequest<EventStore_Cluster_ViewChangeProofRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty>

        /// Handle the "Prepare" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_PrepareRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Empty` message.
        func prepare(
            request: GRPCCore.ServerRequest<EventStore_Cluster_PrepareRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty>

        /// Handle the "PrepareOk" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_PrepareOkRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Empty` message.
        func prepareOk(
            request: GRPCCore.ServerRequest<EventStore_Cluster_PrepareOkRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty>

        /// Handle the "Proposal" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_ProposalRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Empty` message.
        func proposal(
            request: GRPCCore.ServerRequest<EventStore_Cluster_ProposalRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty>

        /// Handle the "Accept" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_AcceptRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Empty` message.
        func accept(
            request: GRPCCore.ServerRequest<EventStore_Cluster_AcceptRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty>

        /// Handle the "LeaderIsResigning" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_LeaderIsResigningRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Empty` message.
        func leaderIsResigning(
            request: GRPCCore.ServerRequest<EventStore_Cluster_LeaderIsResigningRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty>

        /// Handle the "LeaderIsResigningOk" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_LeaderIsResigningOkRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Empty` message.
        func leaderIsResigningOk(
            request: GRPCCore.ServerRequest<EventStore_Cluster_LeaderIsResigningOkRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty>
    }

    /// Simple service protocol for the "event_store.cluster.Elections" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    package protocol SimpleServiceProtocol: EventStore_Cluster_Elections.ServiceProtocol {
        /// Handle the "ViewChange" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Cluster_ViewChangeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Empty` to respond with.
        func viewChange(
            request: EventStore_Cluster_ViewChangeRequest,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Empty

        /// Handle the "ViewChangeProof" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Cluster_ViewChangeProofRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Empty` to respond with.
        func viewChangeProof(
            request: EventStore_Cluster_ViewChangeProofRequest,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Empty

        /// Handle the "Prepare" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Cluster_PrepareRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Empty` to respond with.
        func prepare(
            request: EventStore_Cluster_PrepareRequest,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Empty

        /// Handle the "PrepareOk" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Cluster_PrepareOkRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Empty` to respond with.
        func prepareOk(
            request: EventStore_Cluster_PrepareOkRequest,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Empty

        /// Handle the "Proposal" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Cluster_ProposalRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Empty` to respond with.
        func proposal(
            request: EventStore_Cluster_ProposalRequest,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Empty

        /// Handle the "Accept" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Cluster_AcceptRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Empty` to respond with.
        func accept(
            request: EventStore_Cluster_AcceptRequest,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Empty

        /// Handle the "LeaderIsResigning" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Cluster_LeaderIsResigningRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Empty` to respond with.
        func leaderIsResigning(
            request: EventStore_Cluster_LeaderIsResigningRequest,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Empty

        /// Handle the "LeaderIsResigningOk" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Cluster_LeaderIsResigningOkRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Empty` to respond with.
        func leaderIsResigningOk(
            request: EventStore_Cluster_LeaderIsResigningOkRequest,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Empty
    }
}

// Default implementation of 'registerMethods(with:)'.
extension EventStore_Cluster_Elections.StreamingServiceProtocol {
    package func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: EventStore_Cluster_Elections.Method.ViewChange.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Cluster_ViewChangeRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Empty>(),
            handler: { request, context in
                try await self.viewChange(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Cluster_Elections.Method.ViewChangeProof.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Cluster_ViewChangeProofRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Empty>(),
            handler: { request, context in
                try await self.viewChangeProof(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Cluster_Elections.Method.Prepare.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Cluster_PrepareRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Empty>(),
            handler: { request, context in
                try await self.prepare(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Cluster_Elections.Method.PrepareOk.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Cluster_PrepareOkRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Empty>(),
            handler: { request, context in
                try await self.prepareOk(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Cluster_Elections.Method.Proposal.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Cluster_ProposalRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Empty>(),
            handler: { request, context in
                try await self.proposal(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Cluster_Elections.Method.Accept.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Cluster_AcceptRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Empty>(),
            handler: { request, context in
                try await self.accept(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Cluster_Elections.Method.LeaderIsResigning.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Cluster_LeaderIsResigningRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Empty>(),
            handler: { request, context in
                try await self.leaderIsResigning(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Cluster_Elections.Method.LeaderIsResigningOk.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Cluster_LeaderIsResigningOkRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Empty>(),
            handler: { request, context in
                try await self.leaderIsResigningOk(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension EventStore_Cluster_Elections.ServiceProtocol {
    package func viewChange(
        request: GRPCCore.StreamingServerRequest<EventStore_Cluster_ViewChangeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty> {
        let response = try await self.viewChange(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    package func viewChangeProof(
        request: GRPCCore.StreamingServerRequest<EventStore_Cluster_ViewChangeProofRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty> {
        let response = try await self.viewChangeProof(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    package func prepare(
        request: GRPCCore.StreamingServerRequest<EventStore_Cluster_PrepareRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty> {
        let response = try await self.prepare(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    package func prepareOk(
        request: GRPCCore.StreamingServerRequest<EventStore_Cluster_PrepareOkRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty> {
        let response = try await self.prepareOk(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    package func proposal(
        request: GRPCCore.StreamingServerRequest<EventStore_Cluster_ProposalRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty> {
        let response = try await self.proposal(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    package func accept(
        request: GRPCCore.StreamingServerRequest<EventStore_Cluster_AcceptRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty> {
        let response = try await self.accept(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    package func leaderIsResigning(
        request: GRPCCore.StreamingServerRequest<EventStore_Cluster_LeaderIsResigningRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty> {
        let response = try await self.leaderIsResigning(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    package func leaderIsResigningOk(
        request: GRPCCore.StreamingServerRequest<EventStore_Cluster_LeaderIsResigningOkRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty> {
        let response = try await self.leaderIsResigningOk(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension EventStore_Cluster_Elections.SimpleServiceProtocol {
    package func viewChange(
        request: GRPCCore.ServerRequest<EventStore_Cluster_ViewChangeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty> {
        return GRPCCore.ServerResponse<EventStore_Client_Empty>(
            message: try await self.viewChange(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    package func viewChangeProof(
        request: GRPCCore.ServerRequest<EventStore_Cluster_ViewChangeProofRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty> {
        return GRPCCore.ServerResponse<EventStore_Client_Empty>(
            message: try await self.viewChangeProof(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    package func prepare(
        request: GRPCCore.ServerRequest<EventStore_Cluster_PrepareRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty> {
        return GRPCCore.ServerResponse<EventStore_Client_Empty>(
            message: try await self.prepare(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    package func prepareOk(
        request: GRPCCore.ServerRequest<EventStore_Cluster_PrepareOkRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty> {
        return GRPCCore.ServerResponse<EventStore_Client_Empty>(
            message: try await self.prepareOk(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    package func proposal(
        request: GRPCCore.ServerRequest<EventStore_Cluster_ProposalRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty> {
        return GRPCCore.ServerResponse<EventStore_Client_Empty>(
            message: try await self.proposal(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    package func accept(
        request: GRPCCore.ServerRequest<EventStore_Cluster_AcceptRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty> {
        return GRPCCore.ServerResponse<EventStore_Client_Empty>(
            message: try await self.accept(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    package func leaderIsResigning(
        request: GRPCCore.ServerRequest<EventStore_Cluster_LeaderIsResigningRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty> {
        return GRPCCore.ServerResponse<EventStore_Client_Empty>(
            message: try await self.leaderIsResigning(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    package func leaderIsResigningOk(
        request: GRPCCore.ServerRequest<EventStore_Cluster_LeaderIsResigningOkRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty> {
        return GRPCCore.ServerResponse<EventStore_Client_Empty>(
            message: try await self.leaderIsResigningOk(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: event_store.cluster.Elections (client)

extension EventStore_Cluster_Elections {
    /// Generated client protocol for the "event_store.cluster.Elections" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    package protocol ClientProtocol: Sendable {
        /// Call the "ViewChange" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_ViewChangeRequest` message.
        ///   - serializer: A serializer for `EventStore_Cluster_ViewChangeRequest` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func viewChange<Result>(
            request: GRPCCore.ClientRequest<EventStore_Cluster_ViewChangeRequest>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Cluster_ViewChangeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ViewChangeProof" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_ViewChangeProofRequest` message.
        ///   - serializer: A serializer for `EventStore_Cluster_ViewChangeProofRequest` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func viewChangeProof<Result>(
            request: GRPCCore.ClientRequest<EventStore_Cluster_ViewChangeProofRequest>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Cluster_ViewChangeProofRequest>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Prepare" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_PrepareRequest` message.
        ///   - serializer: A serializer for `EventStore_Cluster_PrepareRequest` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func prepare<Result>(
            request: GRPCCore.ClientRequest<EventStore_Cluster_PrepareRequest>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Cluster_PrepareRequest>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "PrepareOk" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_PrepareOkRequest` message.
        ///   - serializer: A serializer for `EventStore_Cluster_PrepareOkRequest` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func prepareOk<Result>(
            request: GRPCCore.ClientRequest<EventStore_Cluster_PrepareOkRequest>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Cluster_PrepareOkRequest>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Proposal" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_ProposalRequest` message.
        ///   - serializer: A serializer for `EventStore_Cluster_ProposalRequest` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func proposal<Result>(
            request: GRPCCore.ClientRequest<EventStore_Cluster_ProposalRequest>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Cluster_ProposalRequest>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Accept" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_AcceptRequest` message.
        ///   - serializer: A serializer for `EventStore_Cluster_AcceptRequest` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func accept<Result>(
            request: GRPCCore.ClientRequest<EventStore_Cluster_AcceptRequest>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Cluster_AcceptRequest>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "LeaderIsResigning" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_LeaderIsResigningRequest` message.
        ///   - serializer: A serializer for `EventStore_Cluster_LeaderIsResigningRequest` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func leaderIsResigning<Result>(
            request: GRPCCore.ClientRequest<EventStore_Cluster_LeaderIsResigningRequest>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Cluster_LeaderIsResigningRequest>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "LeaderIsResigningOk" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_LeaderIsResigningOkRequest` message.
        ///   - serializer: A serializer for `EventStore_Cluster_LeaderIsResigningOkRequest` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func leaderIsResigningOk<Result>(
            request: GRPCCore.ClientRequest<EventStore_Cluster_LeaderIsResigningOkRequest>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Cluster_LeaderIsResigningOkRequest>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "event_store.cluster.Elections" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    package struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        package init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "ViewChange" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_ViewChangeRequest` message.
        ///   - serializer: A serializer for `EventStore_Cluster_ViewChangeRequest` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func viewChange<Result>(
            request: GRPCCore.ClientRequest<EventStore_Cluster_ViewChangeRequest>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Cluster_ViewChangeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Cluster_Elections.Method.ViewChange.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ViewChangeProof" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_ViewChangeProofRequest` message.
        ///   - serializer: A serializer for `EventStore_Cluster_ViewChangeProofRequest` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func viewChangeProof<Result>(
            request: GRPCCore.ClientRequest<EventStore_Cluster_ViewChangeProofRequest>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Cluster_ViewChangeProofRequest>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Cluster_Elections.Method.ViewChangeProof.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Prepare" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_PrepareRequest` message.
        ///   - serializer: A serializer for `EventStore_Cluster_PrepareRequest` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func prepare<Result>(
            request: GRPCCore.ClientRequest<EventStore_Cluster_PrepareRequest>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Cluster_PrepareRequest>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Cluster_Elections.Method.Prepare.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "PrepareOk" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_PrepareOkRequest` message.
        ///   - serializer: A serializer for `EventStore_Cluster_PrepareOkRequest` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func prepareOk<Result>(
            request: GRPCCore.ClientRequest<EventStore_Cluster_PrepareOkRequest>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Cluster_PrepareOkRequest>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Cluster_Elections.Method.PrepareOk.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Proposal" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_ProposalRequest` message.
        ///   - serializer: A serializer for `EventStore_Cluster_ProposalRequest` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func proposal<Result>(
            request: GRPCCore.ClientRequest<EventStore_Cluster_ProposalRequest>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Cluster_ProposalRequest>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Cluster_Elections.Method.Proposal.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Accept" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_AcceptRequest` message.
        ///   - serializer: A serializer for `EventStore_Cluster_AcceptRequest` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func accept<Result>(
            request: GRPCCore.ClientRequest<EventStore_Cluster_AcceptRequest>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Cluster_AcceptRequest>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Cluster_Elections.Method.Accept.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "LeaderIsResigning" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_LeaderIsResigningRequest` message.
        ///   - serializer: A serializer for `EventStore_Cluster_LeaderIsResigningRequest` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func leaderIsResigning<Result>(
            request: GRPCCore.ClientRequest<EventStore_Cluster_LeaderIsResigningRequest>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Cluster_LeaderIsResigningRequest>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Cluster_Elections.Method.LeaderIsResigning.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "LeaderIsResigningOk" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Cluster_LeaderIsResigningOkRequest` message.
        ///   - serializer: A serializer for `EventStore_Cluster_LeaderIsResigningOkRequest` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func leaderIsResigningOk<Result>(
            request: GRPCCore.ClientRequest<EventStore_Cluster_LeaderIsResigningOkRequest>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Cluster_LeaderIsResigningOkRequest>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Cluster_Elections.Method.LeaderIsResigningOk.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension EventStore_Cluster_Elections.ClientProtocol {
    /// Call the "ViewChange" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Cluster_ViewChangeRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func viewChange<Result>(
        request: GRPCCore.ClientRequest<EventStore_Cluster_ViewChangeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.viewChange(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Cluster_ViewChangeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ViewChangeProof" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Cluster_ViewChangeProofRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func viewChangeProof<Result>(
        request: GRPCCore.ClientRequest<EventStore_Cluster_ViewChangeProofRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.viewChangeProof(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Cluster_ViewChangeProofRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Prepare" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Cluster_PrepareRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func prepare<Result>(
        request: GRPCCore.ClientRequest<EventStore_Cluster_PrepareRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.prepare(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Cluster_PrepareRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PrepareOk" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Cluster_PrepareOkRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func prepareOk<Result>(
        request: GRPCCore.ClientRequest<EventStore_Cluster_PrepareOkRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.prepareOk(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Cluster_PrepareOkRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Proposal" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Cluster_ProposalRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func proposal<Result>(
        request: GRPCCore.ClientRequest<EventStore_Cluster_ProposalRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.proposal(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Cluster_ProposalRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Accept" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Cluster_AcceptRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func accept<Result>(
        request: GRPCCore.ClientRequest<EventStore_Cluster_AcceptRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.accept(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Cluster_AcceptRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "LeaderIsResigning" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Cluster_LeaderIsResigningRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func leaderIsResigning<Result>(
        request: GRPCCore.ClientRequest<EventStore_Cluster_LeaderIsResigningRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.leaderIsResigning(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Cluster_LeaderIsResigningRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "LeaderIsResigningOk" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Cluster_LeaderIsResigningOkRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func leaderIsResigningOk<Result>(
        request: GRPCCore.ClientRequest<EventStore_Cluster_LeaderIsResigningOkRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.leaderIsResigningOk(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Cluster_LeaderIsResigningOkRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension EventStore_Cluster_Elections.ClientProtocol {
    /// Call the "ViewChange" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func viewChange<Result>(
        _ message: EventStore_Cluster_ViewChangeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Cluster_ViewChangeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.viewChange(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ViewChangeProof" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func viewChangeProof<Result>(
        _ message: EventStore_Cluster_ViewChangeProofRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Cluster_ViewChangeProofRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.viewChangeProof(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Prepare" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func prepare<Result>(
        _ message: EventStore_Cluster_PrepareRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Cluster_PrepareRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.prepare(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PrepareOk" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func prepareOk<Result>(
        _ message: EventStore_Cluster_PrepareOkRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Cluster_PrepareOkRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.prepareOk(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Proposal" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func proposal<Result>(
        _ message: EventStore_Cluster_ProposalRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Cluster_ProposalRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.proposal(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Accept" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func accept<Result>(
        _ message: EventStore_Cluster_AcceptRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Cluster_AcceptRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.accept(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "LeaderIsResigning" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func leaderIsResigning<Result>(
        _ message: EventStore_Cluster_LeaderIsResigningRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Cluster_LeaderIsResigningRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.leaderIsResigning(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "LeaderIsResigningOk" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func leaderIsResigningOk<Result>(
        _ message: EventStore_Cluster_LeaderIsResigningOkRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Cluster_LeaderIsResigningOkRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.leaderIsResigningOk(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}