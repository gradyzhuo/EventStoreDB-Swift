// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: persistent.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - event_store.client.persistent_subscriptions.PersistentSubscriptions

/// Namespace containing generated types for the "event_store.client.persistent_subscriptions.PersistentSubscriptions" service.
package enum EventStore_Client_PersistentSubscriptions_PersistentSubscriptions {
    /// Service descriptor for the "event_store.client.persistent_subscriptions.PersistentSubscriptions" service.
    package static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.persistent_subscriptions.PersistentSubscriptions")
    /// Namespace for method metadata.
    package enum Method {
        /// Namespace for "Create" metadata.
        package enum Create {
            /// Request type for "Create".
            package typealias Input = EventStore_Client_PersistentSubscriptions_CreateReq
            /// Response type for "Create".
            package typealias Output = EventStore_Client_PersistentSubscriptions_CreateResp
            /// Descriptor for "Create".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.persistent_subscriptions.PersistentSubscriptions"),
                method: "Create"
            )
        }
        /// Namespace for "Update" metadata.
        package enum Update {
            /// Request type for "Update".
            package typealias Input = EventStore_Client_PersistentSubscriptions_UpdateReq
            /// Response type for "Update".
            package typealias Output = EventStore_Client_PersistentSubscriptions_UpdateResp
            /// Descriptor for "Update".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.persistent_subscriptions.PersistentSubscriptions"),
                method: "Update"
            )
        }
        /// Namespace for "Delete" metadata.
        package enum Delete {
            /// Request type for "Delete".
            package typealias Input = EventStore_Client_PersistentSubscriptions_DeleteReq
            /// Response type for "Delete".
            package typealias Output = EventStore_Client_PersistentSubscriptions_DeleteResp
            /// Descriptor for "Delete".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.persistent_subscriptions.PersistentSubscriptions"),
                method: "Delete"
            )
        }
        /// Namespace for "Read" metadata.
        package enum Read {
            /// Request type for "Read".
            package typealias Input = EventStore_Client_PersistentSubscriptions_ReadReq
            /// Response type for "Read".
            package typealias Output = EventStore_Client_PersistentSubscriptions_ReadResp
            /// Descriptor for "Read".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.persistent_subscriptions.PersistentSubscriptions"),
                method: "Read"
            )
        }
        /// Namespace for "GetInfo" metadata.
        package enum GetInfo {
            /// Request type for "GetInfo".
            package typealias Input = EventStore_Client_PersistentSubscriptions_GetInfoReq
            /// Response type for "GetInfo".
            package typealias Output = EventStore_Client_PersistentSubscriptions_GetInfoResp
            /// Descriptor for "GetInfo".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.persistent_subscriptions.PersistentSubscriptions"),
                method: "GetInfo"
            )
        }
        /// Namespace for "ReplayParked" metadata.
        package enum ReplayParked {
            /// Request type for "ReplayParked".
            package typealias Input = EventStore_Client_PersistentSubscriptions_ReplayParkedReq
            /// Response type for "ReplayParked".
            package typealias Output = EventStore_Client_PersistentSubscriptions_ReplayParkedResp
            /// Descriptor for "ReplayParked".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.persistent_subscriptions.PersistentSubscriptions"),
                method: "ReplayParked"
            )
        }
        /// Namespace for "List" metadata.
        package enum List {
            /// Request type for "List".
            package typealias Input = EventStore_Client_PersistentSubscriptions_ListReq
            /// Response type for "List".
            package typealias Output = EventStore_Client_PersistentSubscriptions_ListResp
            /// Descriptor for "List".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.persistent_subscriptions.PersistentSubscriptions"),
                method: "List"
            )
        }
        /// Namespace for "RestartSubsystem" metadata.
        package enum RestartSubsystem {
            /// Request type for "RestartSubsystem".
            package typealias Input = EventStore_Client_Empty
            /// Response type for "RestartSubsystem".
            package typealias Output = EventStore_Client_Empty
            /// Descriptor for "RestartSubsystem".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.persistent_subscriptions.PersistentSubscriptions"),
                method: "RestartSubsystem"
            )
        }
        /// Descriptors for all methods in the "event_store.client.persistent_subscriptions.PersistentSubscriptions" service.
        package static let descriptors: [GRPCCore.MethodDescriptor] = [
            Create.descriptor,
            Update.descriptor,
            Delete.descriptor,
            Read.descriptor,
            GetInfo.descriptor,
            ReplayParked.descriptor,
            List.descriptor,
            RestartSubsystem.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "event_store.client.persistent_subscriptions.PersistentSubscriptions" service.
    package static let eventStore_client_persistentSubscriptions_PersistentSubscriptions = GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.persistent_subscriptions.PersistentSubscriptions")
}

// MARK: event_store.client.persistent_subscriptions.PersistentSubscriptions (server)

extension EventStore_Client_PersistentSubscriptions_PersistentSubscriptions {
    /// Streaming variant of the service protocol for the "event_store.client.persistent_subscriptions.PersistentSubscriptions" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    package protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "Create" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_PersistentSubscriptions_CreateReq` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_PersistentSubscriptions_CreateResp` messages.
        func create(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_PersistentSubscriptions_CreateReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_PersistentSubscriptions_CreateResp>

        /// Handle the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_PersistentSubscriptions_UpdateReq` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_PersistentSubscriptions_UpdateResp` messages.
        func update(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_PersistentSubscriptions_UpdateReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_PersistentSubscriptions_UpdateResp>

        /// Handle the "Delete" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_PersistentSubscriptions_DeleteReq` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_PersistentSubscriptions_DeleteResp` messages.
        func delete(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_PersistentSubscriptions_DeleteReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_PersistentSubscriptions_DeleteResp>

        /// Handle the "Read" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_PersistentSubscriptions_ReadReq` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_PersistentSubscriptions_ReadResp` messages.
        func read(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_PersistentSubscriptions_ReadReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_PersistentSubscriptions_ReadResp>

        /// Handle the "GetInfo" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_PersistentSubscriptions_GetInfoReq` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_PersistentSubscriptions_GetInfoResp` messages.
        func getInfo(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_PersistentSubscriptions_GetInfoReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_PersistentSubscriptions_GetInfoResp>

        /// Handle the "ReplayParked" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_PersistentSubscriptions_ReplayParkedReq` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_PersistentSubscriptions_ReplayParkedResp` messages.
        func replayParked(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_PersistentSubscriptions_ReplayParkedReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_PersistentSubscriptions_ReplayParkedResp>

        /// Handle the "List" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_PersistentSubscriptions_ListReq` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_PersistentSubscriptions_ListResp` messages.
        func list(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_PersistentSubscriptions_ListReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_PersistentSubscriptions_ListResp>

        /// Handle the "RestartSubsystem" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_Empty` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Empty` messages.
        func restartSubsystem(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_Empty>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty>
    }

    /// Service protocol for the "event_store.client.persistent_subscriptions.PersistentSubscriptions" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    package protocol ServiceProtocol: EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.StreamingServiceProtocol {
        /// Handle the "Create" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_CreateReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_PersistentSubscriptions_CreateResp` message.
        func create(
            request: GRPCCore.ServerRequest<EventStore_Client_PersistentSubscriptions_CreateReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_PersistentSubscriptions_CreateResp>

        /// Handle the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_UpdateReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_PersistentSubscriptions_UpdateResp` message.
        func update(
            request: GRPCCore.ServerRequest<EventStore_Client_PersistentSubscriptions_UpdateReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_PersistentSubscriptions_UpdateResp>

        /// Handle the "Delete" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_DeleteReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_PersistentSubscriptions_DeleteResp` message.
        func delete(
            request: GRPCCore.ServerRequest<EventStore_Client_PersistentSubscriptions_DeleteReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_PersistentSubscriptions_DeleteResp>

        /// Handle the "Read" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_PersistentSubscriptions_ReadReq` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_PersistentSubscriptions_ReadResp` messages.
        func read(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_PersistentSubscriptions_ReadReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_PersistentSubscriptions_ReadResp>

        /// Handle the "GetInfo" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_GetInfoReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_PersistentSubscriptions_GetInfoResp` message.
        func getInfo(
            request: GRPCCore.ServerRequest<EventStore_Client_PersistentSubscriptions_GetInfoReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_PersistentSubscriptions_GetInfoResp>

        /// Handle the "ReplayParked" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_ReplayParkedReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_PersistentSubscriptions_ReplayParkedResp` message.
        func replayParked(
            request: GRPCCore.ServerRequest<EventStore_Client_PersistentSubscriptions_ReplayParkedReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_PersistentSubscriptions_ReplayParkedResp>

        /// Handle the "List" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_ListReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_PersistentSubscriptions_ListResp` message.
        func list(
            request: GRPCCore.ServerRequest<EventStore_Client_PersistentSubscriptions_ListReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_PersistentSubscriptions_ListResp>

        /// Handle the "RestartSubsystem" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Empty` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Empty` message.
        func restartSubsystem(
            request: GRPCCore.ServerRequest<EventStore_Client_Empty>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty>
    }

    /// Simple service protocol for the "event_store.client.persistent_subscriptions.PersistentSubscriptions" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    package protocol SimpleServiceProtocol: EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.ServiceProtocol {
        /// Handle the "Create" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_PersistentSubscriptions_CreateReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_PersistentSubscriptions_CreateResp` to respond with.
        func create(
            request: EventStore_Client_PersistentSubscriptions_CreateReq,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_PersistentSubscriptions_CreateResp

        /// Handle the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_PersistentSubscriptions_UpdateReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_PersistentSubscriptions_UpdateResp` to respond with.
        func update(
            request: EventStore_Client_PersistentSubscriptions_UpdateReq,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_PersistentSubscriptions_UpdateResp

        /// Handle the "Delete" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_PersistentSubscriptions_DeleteReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_PersistentSubscriptions_DeleteResp` to respond with.
        func delete(
            request: EventStore_Client_PersistentSubscriptions_DeleteReq,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_PersistentSubscriptions_DeleteResp

        /// Handle the "Read" method.
        ///
        /// - Parameters:
        ///   - request: A stream of `EventStore_Client_PersistentSubscriptions_ReadReq` messages.
        ///   - response: A response stream of `EventStore_Client_PersistentSubscriptions_ReadResp` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func read(
            request: GRPCCore.RPCAsyncSequence<EventStore_Client_PersistentSubscriptions_ReadReq, any Swift.Error>,
            response: GRPCCore.RPCWriter<EventStore_Client_PersistentSubscriptions_ReadResp>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "GetInfo" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_PersistentSubscriptions_GetInfoReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_PersistentSubscriptions_GetInfoResp` to respond with.
        func getInfo(
            request: EventStore_Client_PersistentSubscriptions_GetInfoReq,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_PersistentSubscriptions_GetInfoResp

        /// Handle the "ReplayParked" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_PersistentSubscriptions_ReplayParkedReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_PersistentSubscriptions_ReplayParkedResp` to respond with.
        func replayParked(
            request: EventStore_Client_PersistentSubscriptions_ReplayParkedReq,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_PersistentSubscriptions_ReplayParkedResp

        /// Handle the "List" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_PersistentSubscriptions_ListReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_PersistentSubscriptions_ListResp` to respond with.
        func list(
            request: EventStore_Client_PersistentSubscriptions_ListReq,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_PersistentSubscriptions_ListResp

        /// Handle the "RestartSubsystem" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_Empty` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Empty` to respond with.
        func restartSubsystem(
            request: EventStore_Client_Empty,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Empty
    }
}

// Default implementation of 'registerMethods(with:)'.
extension EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.StreamingServiceProtocol {
    package func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.Method.Create.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_CreateReq>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_PersistentSubscriptions_CreateResp>(),
            handler: { request, context in
                try await self.create(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.Method.Update.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_UpdateReq>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_PersistentSubscriptions_UpdateResp>(),
            handler: { request, context in
                try await self.update(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.Method.Delete.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_DeleteReq>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_PersistentSubscriptions_DeleteResp>(),
            handler: { request, context in
                try await self.delete(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.Method.Read.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_ReadReq>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_PersistentSubscriptions_ReadResp>(),
            handler: { request, context in
                try await self.read(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.Method.GetInfo.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_GetInfoReq>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_PersistentSubscriptions_GetInfoResp>(),
            handler: { request, context in
                try await self.getInfo(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.Method.ReplayParked.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_ReplayParkedReq>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_PersistentSubscriptions_ReplayParkedResp>(),
            handler: { request, context in
                try await self.replayParked(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.Method.List.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_ListReq>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_PersistentSubscriptions_ListResp>(),
            handler: { request, context in
                try await self.list(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.Method.RestartSubsystem.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Empty>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Empty>(),
            handler: { request, context in
                try await self.restartSubsystem(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.ServiceProtocol {
    package func create(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_PersistentSubscriptions_CreateReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_PersistentSubscriptions_CreateResp> {
        let response = try await self.create(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    package func update(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_PersistentSubscriptions_UpdateReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_PersistentSubscriptions_UpdateResp> {
        let response = try await self.update(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    package func delete(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_PersistentSubscriptions_DeleteReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_PersistentSubscriptions_DeleteResp> {
        let response = try await self.delete(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    package func getInfo(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_PersistentSubscriptions_GetInfoReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_PersistentSubscriptions_GetInfoResp> {
        let response = try await self.getInfo(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    package func replayParked(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_PersistentSubscriptions_ReplayParkedReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_PersistentSubscriptions_ReplayParkedResp> {
        let response = try await self.replayParked(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    package func list(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_PersistentSubscriptions_ListReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_PersistentSubscriptions_ListResp> {
        let response = try await self.list(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    package func restartSubsystem(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_Empty>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty> {
        let response = try await self.restartSubsystem(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.SimpleServiceProtocol {
    package func create(
        request: GRPCCore.ServerRequest<EventStore_Client_PersistentSubscriptions_CreateReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_PersistentSubscriptions_CreateResp> {
        return GRPCCore.ServerResponse<EventStore_Client_PersistentSubscriptions_CreateResp>(
            message: try await self.create(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    package func update(
        request: GRPCCore.ServerRequest<EventStore_Client_PersistentSubscriptions_UpdateReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_PersistentSubscriptions_UpdateResp> {
        return GRPCCore.ServerResponse<EventStore_Client_PersistentSubscriptions_UpdateResp>(
            message: try await self.update(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    package func delete(
        request: GRPCCore.ServerRequest<EventStore_Client_PersistentSubscriptions_DeleteReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_PersistentSubscriptions_DeleteResp> {
        return GRPCCore.ServerResponse<EventStore_Client_PersistentSubscriptions_DeleteResp>(
            message: try await self.delete(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    package func read(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_PersistentSubscriptions_ReadReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_PersistentSubscriptions_ReadResp> {
        return GRPCCore.StreamingServerResponse<EventStore_Client_PersistentSubscriptions_ReadResp>(
            metadata: [:],
            producer: { writer in
                try await self.read(
                    request: request.messages,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    package func getInfo(
        request: GRPCCore.ServerRequest<EventStore_Client_PersistentSubscriptions_GetInfoReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_PersistentSubscriptions_GetInfoResp> {
        return GRPCCore.ServerResponse<EventStore_Client_PersistentSubscriptions_GetInfoResp>(
            message: try await self.getInfo(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    package func replayParked(
        request: GRPCCore.ServerRequest<EventStore_Client_PersistentSubscriptions_ReplayParkedReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_PersistentSubscriptions_ReplayParkedResp> {
        return GRPCCore.ServerResponse<EventStore_Client_PersistentSubscriptions_ReplayParkedResp>(
            message: try await self.replayParked(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    package func list(
        request: GRPCCore.ServerRequest<EventStore_Client_PersistentSubscriptions_ListReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_PersistentSubscriptions_ListResp> {
        return GRPCCore.ServerResponse<EventStore_Client_PersistentSubscriptions_ListResp>(
            message: try await self.list(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    package func restartSubsystem(
        request: GRPCCore.ServerRequest<EventStore_Client_Empty>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty> {
        return GRPCCore.ServerResponse<EventStore_Client_Empty>(
            message: try await self.restartSubsystem(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: event_store.client.persistent_subscriptions.PersistentSubscriptions (client)

extension EventStore_Client_PersistentSubscriptions_PersistentSubscriptions {
    /// Generated client protocol for the "event_store.client.persistent_subscriptions.PersistentSubscriptions" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    package protocol ClientProtocol: Sendable {
        /// Call the "Create" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_CreateReq` message.
        ///   - serializer: A serializer for `EventStore_Client_PersistentSubscriptions_CreateReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_PersistentSubscriptions_CreateResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func create<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_CreateReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_PersistentSubscriptions_CreateReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_PersistentSubscriptions_CreateResp>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_CreateResp>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_UpdateReq` message.
        ///   - serializer: A serializer for `EventStore_Client_PersistentSubscriptions_UpdateReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_PersistentSubscriptions_UpdateResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func update<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_UpdateReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_PersistentSubscriptions_UpdateReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_PersistentSubscriptions_UpdateResp>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_UpdateResp>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Delete" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_DeleteReq` message.
        ///   - serializer: A serializer for `EventStore_Client_PersistentSubscriptions_DeleteReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_PersistentSubscriptions_DeleteResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func delete<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_DeleteReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_PersistentSubscriptions_DeleteReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_PersistentSubscriptions_DeleteResp>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_DeleteResp>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Read" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `EventStore_Client_PersistentSubscriptions_ReadReq` messages.
        ///   - serializer: A serializer for `EventStore_Client_PersistentSubscriptions_ReadReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_PersistentSubscriptions_ReadResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func read<Result>(
            request: GRPCCore.StreamingClientRequest<EventStore_Client_PersistentSubscriptions_ReadReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_PersistentSubscriptions_ReadReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_PersistentSubscriptions_ReadResp>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<EventStore_Client_PersistentSubscriptions_ReadResp>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetInfo" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_GetInfoReq` message.
        ///   - serializer: A serializer for `EventStore_Client_PersistentSubscriptions_GetInfoReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_PersistentSubscriptions_GetInfoResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getInfo<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_GetInfoReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_PersistentSubscriptions_GetInfoReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_PersistentSubscriptions_GetInfoResp>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_GetInfoResp>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ReplayParked" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_ReplayParkedReq` message.
        ///   - serializer: A serializer for `EventStore_Client_PersistentSubscriptions_ReplayParkedReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_PersistentSubscriptions_ReplayParkedResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func replayParked<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_ReplayParkedReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_PersistentSubscriptions_ReplayParkedReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_PersistentSubscriptions_ReplayParkedResp>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_ReplayParkedResp>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "List" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_ListReq` message.
        ///   - serializer: A serializer for `EventStore_Client_PersistentSubscriptions_ListReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_PersistentSubscriptions_ListResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func list<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_ListReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_PersistentSubscriptions_ListReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_PersistentSubscriptions_ListResp>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_ListResp>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RestartSubsystem" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Empty` message.
        ///   - serializer: A serializer for `EventStore_Client_Empty` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func restartSubsystem<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Empty>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Empty>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "event_store.client.persistent_subscriptions.PersistentSubscriptions" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    package struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        package init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "Create" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_CreateReq` message.
        ///   - serializer: A serializer for `EventStore_Client_PersistentSubscriptions_CreateReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_PersistentSubscriptions_CreateResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func create<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_CreateReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_PersistentSubscriptions_CreateReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_PersistentSubscriptions_CreateResp>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_CreateResp>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.Method.Create.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_UpdateReq` message.
        ///   - serializer: A serializer for `EventStore_Client_PersistentSubscriptions_UpdateReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_PersistentSubscriptions_UpdateResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func update<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_UpdateReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_PersistentSubscriptions_UpdateReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_PersistentSubscriptions_UpdateResp>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_UpdateResp>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.Method.Update.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Delete" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_DeleteReq` message.
        ///   - serializer: A serializer for `EventStore_Client_PersistentSubscriptions_DeleteReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_PersistentSubscriptions_DeleteResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func delete<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_DeleteReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_PersistentSubscriptions_DeleteReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_PersistentSubscriptions_DeleteResp>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_DeleteResp>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.Method.Delete.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Read" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `EventStore_Client_PersistentSubscriptions_ReadReq` messages.
        ///   - serializer: A serializer for `EventStore_Client_PersistentSubscriptions_ReadReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_PersistentSubscriptions_ReadResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func read<Result>(
            request: GRPCCore.StreamingClientRequest<EventStore_Client_PersistentSubscriptions_ReadReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_PersistentSubscriptions_ReadReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_PersistentSubscriptions_ReadResp>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<EventStore_Client_PersistentSubscriptions_ReadResp>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.Method.Read.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetInfo" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_GetInfoReq` message.
        ///   - serializer: A serializer for `EventStore_Client_PersistentSubscriptions_GetInfoReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_PersistentSubscriptions_GetInfoResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getInfo<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_GetInfoReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_PersistentSubscriptions_GetInfoReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_PersistentSubscriptions_GetInfoResp>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_GetInfoResp>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.Method.GetInfo.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ReplayParked" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_ReplayParkedReq` message.
        ///   - serializer: A serializer for `EventStore_Client_PersistentSubscriptions_ReplayParkedReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_PersistentSubscriptions_ReplayParkedResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func replayParked<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_ReplayParkedReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_PersistentSubscriptions_ReplayParkedReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_PersistentSubscriptions_ReplayParkedResp>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_ReplayParkedResp>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.Method.ReplayParked.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "List" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_ListReq` message.
        ///   - serializer: A serializer for `EventStore_Client_PersistentSubscriptions_ListReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_PersistentSubscriptions_ListResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func list<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_ListReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_PersistentSubscriptions_ListReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_PersistentSubscriptions_ListResp>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_ListResp>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.Method.List.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RestartSubsystem" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Empty` message.
        ///   - serializer: A serializer for `EventStore_Client_Empty` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func restartSubsystem<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Empty>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Empty>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.Method.RestartSubsystem.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.ClientProtocol {
    /// Call the "Create" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_CreateReq` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func create<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_CreateReq>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_CreateResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.create(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_PersistentSubscriptions_CreateReq>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_CreateResp>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Update" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_UpdateReq` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func update<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_UpdateReq>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_UpdateResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.update(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_PersistentSubscriptions_UpdateReq>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_UpdateResp>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Delete" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_DeleteReq` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func delete<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_DeleteReq>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_DeleteResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.delete(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_PersistentSubscriptions_DeleteReq>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_DeleteResp>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Read" method.
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `EventStore_Client_PersistentSubscriptions_ReadReq` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func read<Result>(
        request: GRPCCore.StreamingClientRequest<EventStore_Client_PersistentSubscriptions_ReadReq>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<EventStore_Client_PersistentSubscriptions_ReadResp>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.read(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_PersistentSubscriptions_ReadReq>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_ReadResp>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetInfo" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_GetInfoReq` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getInfo<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_GetInfoReq>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_GetInfoResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getInfo(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_PersistentSubscriptions_GetInfoReq>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_GetInfoResp>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ReplayParked" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_ReplayParkedReq` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func replayParked<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_ReplayParkedReq>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_ReplayParkedResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.replayParked(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_PersistentSubscriptions_ReplayParkedReq>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_ReplayParkedResp>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "List" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_PersistentSubscriptions_ListReq` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func list<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_ListReq>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_ListResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.list(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_PersistentSubscriptions_ListReq>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_PersistentSubscriptions_ListResp>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RestartSubsystem" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_Empty` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func restartSubsystem<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.restartSubsystem(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Empty>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension EventStore_Client_PersistentSubscriptions_PersistentSubscriptions.ClientProtocol {
    /// Call the "Create" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func create<Result>(
        _ message: EventStore_Client_PersistentSubscriptions_CreateReq,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_CreateResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_CreateReq>(
            message: message,
            metadata: metadata
        )
        return try await self.create(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Update" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func update<Result>(
        _ message: EventStore_Client_PersistentSubscriptions_UpdateReq,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_UpdateResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_UpdateReq>(
            message: message,
            metadata: metadata
        )
        return try await self.update(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Delete" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func delete<Result>(
        _ message: EventStore_Client_PersistentSubscriptions_DeleteReq,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_DeleteResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_DeleteReq>(
            message: message,
            metadata: metadata
        )
        return try await self.delete(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Read" method.
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func read<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<EventStore_Client_PersistentSubscriptions_ReadReq>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<EventStore_Client_PersistentSubscriptions_ReadResp>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<EventStore_Client_PersistentSubscriptions_ReadReq>(
            metadata: metadata,
            producer: producer
        )
        return try await self.read(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetInfo" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getInfo<Result>(
        _ message: EventStore_Client_PersistentSubscriptions_GetInfoReq,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_GetInfoResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_GetInfoReq>(
            message: message,
            metadata: metadata
        )
        return try await self.getInfo(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ReplayParked" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func replayParked<Result>(
        _ message: EventStore_Client_PersistentSubscriptions_ReplayParkedReq,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_ReplayParkedResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_ReplayParkedReq>(
            message: message,
            metadata: metadata
        )
        return try await self.replayParked(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "List" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func list<Result>(
        _ message: EventStore_Client_PersistentSubscriptions_ListReq,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_PersistentSubscriptions_ListResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_PersistentSubscriptions_ListReq>(
            message: message,
            metadata: metadata
        )
        return try await self.list(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RestartSubsystem" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func restartSubsystem<Result>(
        _ message: EventStore_Client_Empty,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_Empty>(
            message: message,
            metadata: metadata
        )
        return try await self.restartSubsystem(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}