// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: shared.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

package struct EventStore_Client_UUID: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var value: EventStore_Client_UUID.OneOf_Value? = nil

  package var structured: EventStore_Client_UUID.Structured {
    get {
      if case .structured(let v)? = value {return v}
      return EventStore_Client_UUID.Structured()
    }
    set {value = .structured(newValue)}
  }

  package var string: String {
    get {
      if case .string(let v)? = value {return v}
      return String()
    }
    set {value = .string(newValue)}
  }

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package enum OneOf_Value: Equatable, Sendable {
    case structured(EventStore_Client_UUID.Structured)
    case string(String)

  }

  package struct Structured: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    package var mostSignificantBits: Int64 = 0

    package var leastSignificantBits: Int64 = 0

    package var unknownFields = SwiftProtobuf.UnknownStorage()

    package init() {}
  }

  package init() {}
}

package struct EventStore_Client_Empty: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

package struct EventStore_Client_StreamIdentifier: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var streamName: Data = Data()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

package struct EventStore_Client_AllStreamPosition: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var commitPosition: UInt64 = 0

  package var preparePosition: UInt64 = 0

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

package struct EventStore_Client_WrongExpectedVersion: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var currentStreamRevisionOption: EventStore_Client_WrongExpectedVersion.OneOf_CurrentStreamRevisionOption? = nil

  package var currentStreamRevision: UInt64 {
    get {
      if case .currentStreamRevision(let v)? = currentStreamRevisionOption {return v}
      return 0
    }
    set {currentStreamRevisionOption = .currentStreamRevision(newValue)}
  }

  package var currentNoStream: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .currentNoStream(let v)? = currentStreamRevisionOption {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {currentStreamRevisionOption = .currentNoStream(newValue)}
  }

  package var expectedStreamPositionOption: EventStore_Client_WrongExpectedVersion.OneOf_ExpectedStreamPositionOption? = nil

  package var expectedStreamPosition: UInt64 {
    get {
      if case .expectedStreamPosition(let v)? = expectedStreamPositionOption {return v}
      return 0
    }
    set {expectedStreamPositionOption = .expectedStreamPosition(newValue)}
  }

  package var expectedAny: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .expectedAny(let v)? = expectedStreamPositionOption {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {expectedStreamPositionOption = .expectedAny(newValue)}
  }

  package var expectedStreamExists: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .expectedStreamExists(let v)? = expectedStreamPositionOption {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {expectedStreamPositionOption = .expectedStreamExists(newValue)}
  }

  package var expectedNoStream: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .expectedNoStream(let v)? = expectedStreamPositionOption {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {expectedStreamPositionOption = .expectedNoStream(newValue)}
  }

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package enum OneOf_CurrentStreamRevisionOption: Equatable, Sendable {
    case currentStreamRevision(UInt64)
    case currentNoStream(SwiftProtobuf.Google_Protobuf_Empty)

  }

  package enum OneOf_ExpectedStreamPositionOption: Equatable, Sendable {
    case expectedStreamPosition(UInt64)
    case expectedAny(SwiftProtobuf.Google_Protobuf_Empty)
    case expectedStreamExists(SwiftProtobuf.Google_Protobuf_Empty)
    case expectedNoStream(SwiftProtobuf.Google_Protobuf_Empty)

  }

  package init() {}
}

package struct EventStore_Client_AccessDenied: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

package struct EventStore_Client_StreamDeleted: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var streamIdentifier: EventStore_Client_StreamIdentifier {
    get {return _streamIdentifier ?? EventStore_Client_StreamIdentifier()}
    set {_streamIdentifier = newValue}
  }
  /// Returns true if `streamIdentifier` has been explicitly set.
  package var hasStreamIdentifier: Bool {return self._streamIdentifier != nil}
  /// Clears the value of `streamIdentifier`. Subsequent reads from it will return its default value.
  package mutating func clearStreamIdentifier() {self._streamIdentifier = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _streamIdentifier: EventStore_Client_StreamIdentifier? = nil
}

package struct EventStore_Client_Timeout: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

package struct EventStore_Client_Unknown: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

package struct EventStore_Client_InvalidTransaction: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

package struct EventStore_Client_MaximumAppendSizeExceeded: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var maxAppendSize: UInt32 = 0

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

package struct EventStore_Client_BadRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var message: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "event_store.client"

extension EventStore_Client_UUID: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".UUID"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "structured"),
    2: .same(proto: "string"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: EventStore_Client_UUID.Structured?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .structured(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .structured(v)
        }
      }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .string(v)
        }
      }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.value {
    case .structured?: try {
      guard case .structured(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .string?: try {
      guard case .string(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: EventStore_Client_UUID, rhs: EventStore_Client_UUID) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EventStore_Client_UUID.Structured: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = EventStore_Client_UUID.protoMessageName + ".Structured"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "most_significant_bits"),
    2: .standard(proto: "least_significant_bits"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.mostSignificantBits) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.leastSignificantBits) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mostSignificantBits != 0 {
      try visitor.visitSingularInt64Field(value: self.mostSignificantBits, fieldNumber: 1)
    }
    if self.leastSignificantBits != 0 {
      try visitor.visitSingularInt64Field(value: self.leastSignificantBits, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: EventStore_Client_UUID.Structured, rhs: EventStore_Client_UUID.Structured) -> Bool {
    if lhs.mostSignificantBits != rhs.mostSignificantBits {return false}
    if lhs.leastSignificantBits != rhs.leastSignificantBits {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EventStore_Client_Empty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Empty"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: EventStore_Client_Empty, rhs: EventStore_Client_Empty) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EventStore_Client_StreamIdentifier: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".StreamIdentifier"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "stream_name"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeSingularBytesField(value: &self.streamName) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.streamName.isEmpty {
      try visitor.visitSingularBytesField(value: self.streamName, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: EventStore_Client_StreamIdentifier, rhs: EventStore_Client_StreamIdentifier) -> Bool {
    if lhs.streamName != rhs.streamName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EventStore_Client_AllStreamPosition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".AllStreamPosition"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "commit_position"),
    2: .standard(proto: "prepare_position"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.commitPosition) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.preparePosition) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.commitPosition != 0 {
      try visitor.visitSingularUInt64Field(value: self.commitPosition, fieldNumber: 1)
    }
    if self.preparePosition != 0 {
      try visitor.visitSingularUInt64Field(value: self.preparePosition, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: EventStore_Client_AllStreamPosition, rhs: EventStore_Client_AllStreamPosition) -> Bool {
    if lhs.commitPosition != rhs.commitPosition {return false}
    if lhs.preparePosition != rhs.preparePosition {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EventStore_Client_WrongExpectedVersion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".WrongExpectedVersion"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "current_stream_revision"),
    2: .standard(proto: "current_no_stream"),
    3: .standard(proto: "expected_stream_position"),
    4: .standard(proto: "expected_any"),
    5: .standard(proto: "expected_stream_exists"),
    6: .standard(proto: "expected_no_stream"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: UInt64?
        try decoder.decodeSingularUInt64Field(value: &v)
        if let v = v {
          if self.currentStreamRevisionOption != nil {try decoder.handleConflictingOneOf()}
          self.currentStreamRevisionOption = .currentStreamRevision(v)
        }
      }()
      case 2: try {
        var v: SwiftProtobuf.Google_Protobuf_Empty?
        var hadOneofValue = false
        if let current = self.currentStreamRevisionOption {
          hadOneofValue = true
          if case .currentNoStream(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.currentStreamRevisionOption = .currentNoStream(v)
        }
      }()
      case 3: try {
        var v: UInt64?
        try decoder.decodeSingularUInt64Field(value: &v)
        if let v = v {
          if self.expectedStreamPositionOption != nil {try decoder.handleConflictingOneOf()}
          self.expectedStreamPositionOption = .expectedStreamPosition(v)
        }
      }()
      case 4: try {
        var v: SwiftProtobuf.Google_Protobuf_Empty?
        var hadOneofValue = false
        if let current = self.expectedStreamPositionOption {
          hadOneofValue = true
          if case .expectedAny(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.expectedStreamPositionOption = .expectedAny(v)
        }
      }()
      case 5: try {
        var v: SwiftProtobuf.Google_Protobuf_Empty?
        var hadOneofValue = false
        if let current = self.expectedStreamPositionOption {
          hadOneofValue = true
          if case .expectedStreamExists(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.expectedStreamPositionOption = .expectedStreamExists(v)
        }
      }()
      case 6: try {
        var v: SwiftProtobuf.Google_Protobuf_Empty?
        var hadOneofValue = false
        if let current = self.expectedStreamPositionOption {
          hadOneofValue = true
          if case .expectedNoStream(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.expectedStreamPositionOption = .expectedNoStream(v)
        }
      }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.currentStreamRevisionOption {
    case .currentStreamRevision?: try {
      guard case .currentStreamRevision(let v)? = self.currentStreamRevisionOption else { preconditionFailure() }
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }()
    case .currentNoStream?: try {
      guard case .currentNoStream(let v)? = self.currentStreamRevisionOption else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    switch self.expectedStreamPositionOption {
    case .expectedStreamPosition?: try {
      guard case .expectedStreamPosition(let v)? = self.expectedStreamPositionOption else { preconditionFailure() }
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    }()
    case .expectedAny?: try {
      guard case .expectedAny(let v)? = self.expectedStreamPositionOption else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .expectedStreamExists?: try {
      guard case .expectedStreamExists(let v)? = self.expectedStreamPositionOption else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .expectedNoStream?: try {
      guard case .expectedNoStream(let v)? = self.expectedStreamPositionOption else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: EventStore_Client_WrongExpectedVersion, rhs: EventStore_Client_WrongExpectedVersion) -> Bool {
    if lhs.currentStreamRevisionOption != rhs.currentStreamRevisionOption {return false}
    if lhs.expectedStreamPositionOption != rhs.expectedStreamPositionOption {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EventStore_Client_AccessDenied: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".AccessDenied"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: EventStore_Client_AccessDenied, rhs: EventStore_Client_AccessDenied) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EventStore_Client_StreamDeleted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".StreamDeleted"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stream_identifier"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._streamIdentifier) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._streamIdentifier {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: EventStore_Client_StreamDeleted, rhs: EventStore_Client_StreamDeleted) -> Bool {
    if lhs._streamIdentifier != rhs._streamIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EventStore_Client_Timeout: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Timeout"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: EventStore_Client_Timeout, rhs: EventStore_Client_Timeout) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EventStore_Client_Unknown: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Unknown"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: EventStore_Client_Unknown, rhs: EventStore_Client_Unknown) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EventStore_Client_InvalidTransaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".InvalidTransaction"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: EventStore_Client_InvalidTransaction, rhs: EventStore_Client_InvalidTransaction) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EventStore_Client_MaximumAppendSizeExceeded: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".MaximumAppendSizeExceeded"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "maxAppendSize"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.maxAppendSize) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.maxAppendSize != 0 {
      try visitor.visitSingularUInt32Field(value: self.maxAppendSize, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: EventStore_Client_MaximumAppendSizeExceeded, rhs: EventStore_Client_MaximumAppendSizeExceeded) -> Bool {
    if lhs.maxAppendSize != rhs.maxAppendSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EventStore_Client_BadRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".BadRequest"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: EventStore_Client_BadRequest, rhs: EventStore_Client_BadRequest) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
