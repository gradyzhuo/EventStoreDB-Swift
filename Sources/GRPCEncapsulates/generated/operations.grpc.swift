// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: operations.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - event_store.client.operations.Operations

/// Namespace containing generated types for the "event_store.client.operations.Operations" service.
public enum EventStore_Client_Operations_Operations {
    /// Service descriptor for the "event_store.client.operations.Operations" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.operations.Operations")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "StartScavenge" metadata.
        public enum StartScavenge {
            /// Request type for "StartScavenge".
            public typealias Input = EventStore_Client_Operations_StartScavengeReq
            /// Response type for "StartScavenge".
            public typealias Output = EventStore_Client_Operations_ScavengeResp
            /// Descriptor for "StartScavenge".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.operations.Operations"),
                method: "StartScavenge"
            )
        }
        /// Namespace for "StopScavenge" metadata.
        public enum StopScavenge {
            /// Request type for "StopScavenge".
            public typealias Input = EventStore_Client_Operations_StopScavengeReq
            /// Response type for "StopScavenge".
            public typealias Output = EventStore_Client_Operations_ScavengeResp
            /// Descriptor for "StopScavenge".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.operations.Operations"),
                method: "StopScavenge"
            )
        }
        /// Namespace for "Shutdown" metadata.
        public enum Shutdown {
            /// Request type for "Shutdown".
            public typealias Input = EventStore_Client_Empty
            /// Response type for "Shutdown".
            public typealias Output = EventStore_Client_Empty
            /// Descriptor for "Shutdown".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.operations.Operations"),
                method: "Shutdown"
            )
        }
        /// Namespace for "MergeIndexes" metadata.
        public enum MergeIndexes {
            /// Request type for "MergeIndexes".
            public typealias Input = EventStore_Client_Empty
            /// Response type for "MergeIndexes".
            public typealias Output = EventStore_Client_Empty
            /// Descriptor for "MergeIndexes".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.operations.Operations"),
                method: "MergeIndexes"
            )
        }
        /// Namespace for "ResignNode" metadata.
        public enum ResignNode {
            /// Request type for "ResignNode".
            public typealias Input = EventStore_Client_Empty
            /// Response type for "ResignNode".
            public typealias Output = EventStore_Client_Empty
            /// Descriptor for "ResignNode".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.operations.Operations"),
                method: "ResignNode"
            )
        }
        /// Namespace for "SetNodePriority" metadata.
        public enum SetNodePriority {
            /// Request type for "SetNodePriority".
            public typealias Input = EventStore_Client_Operations_SetNodePriorityReq
            /// Response type for "SetNodePriority".
            public typealias Output = EventStore_Client_Empty
            /// Descriptor for "SetNodePriority".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.operations.Operations"),
                method: "SetNodePriority"
            )
        }
        /// Namespace for "RestartPersistentSubscriptions" metadata.
        public enum RestartPersistentSubscriptions {
            /// Request type for "RestartPersistentSubscriptions".
            public typealias Input = EventStore_Client_Empty
            /// Response type for "RestartPersistentSubscriptions".
            public typealias Output = EventStore_Client_Empty
            /// Descriptor for "RestartPersistentSubscriptions".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.operations.Operations"),
                method: "RestartPersistentSubscriptions"
            )
        }
        /// Descriptors for all methods in the "event_store.client.operations.Operations" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            StartScavenge.descriptor,
            StopScavenge.descriptor,
            Shutdown.descriptor,
            MergeIndexes.descriptor,
            ResignNode.descriptor,
            SetNodePriority.descriptor,
            RestartPersistentSubscriptions.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "event_store.client.operations.Operations" service.
    public static let event_store_client_operations_Operations = GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.operations.Operations")
}

// MARK: event_store.client.operations.Operations (server)

extension EventStore_Client_Operations_Operations {
    /// Streaming variant of the service protocol for the "event_store.client.operations.Operations" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "StartScavenge" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_Operations_StartScavengeReq` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Operations_ScavengeResp` messages.
        func startScavenge(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_Operations_StartScavengeReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Operations_ScavengeResp>

        /// Handle the "StopScavenge" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_Operations_StopScavengeReq` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Operations_ScavengeResp` messages.
        func stopScavenge(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_Operations_StopScavengeReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Operations_ScavengeResp>

        /// Handle the "Shutdown" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_Empty` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Empty` messages.
        func shutdown(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_Empty>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty>

        /// Handle the "MergeIndexes" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_Empty` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Empty` messages.
        func mergeIndexes(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_Empty>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty>

        /// Handle the "ResignNode" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_Empty` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Empty` messages.
        func resignNode(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_Empty>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty>

        /// Handle the "SetNodePriority" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_Operations_SetNodePriorityReq` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Empty` messages.
        func setNodePriority(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_Operations_SetNodePriorityReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty>

        /// Handle the "RestartPersistentSubscriptions" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_Empty` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Empty` messages.
        func restartPersistentSubscriptions(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_Empty>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty>
    }

    /// Service protocol for the "event_store.client.operations.Operations" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    public protocol ServiceProtocol: EventStore_Client_Operations_Operations.StreamingServiceProtocol {
        /// Handle the "StartScavenge" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Operations_StartScavengeReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Operations_ScavengeResp` message.
        func startScavenge(
            request: GRPCCore.ServerRequest<EventStore_Client_Operations_StartScavengeReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Operations_ScavengeResp>

        /// Handle the "StopScavenge" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Operations_StopScavengeReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Operations_ScavengeResp` message.
        func stopScavenge(
            request: GRPCCore.ServerRequest<EventStore_Client_Operations_StopScavengeReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Operations_ScavengeResp>

        /// Handle the "Shutdown" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Empty` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Empty` message.
        func shutdown(
            request: GRPCCore.ServerRequest<EventStore_Client_Empty>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty>

        /// Handle the "MergeIndexes" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Empty` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Empty` message.
        func mergeIndexes(
            request: GRPCCore.ServerRequest<EventStore_Client_Empty>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty>

        /// Handle the "ResignNode" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Empty` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Empty` message.
        func resignNode(
            request: GRPCCore.ServerRequest<EventStore_Client_Empty>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty>

        /// Handle the "SetNodePriority" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Operations_SetNodePriorityReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Empty` message.
        func setNodePriority(
            request: GRPCCore.ServerRequest<EventStore_Client_Operations_SetNodePriorityReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty>

        /// Handle the "RestartPersistentSubscriptions" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Empty` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Empty` message.
        func restartPersistentSubscriptions(
            request: GRPCCore.ServerRequest<EventStore_Client_Empty>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty>
    }

    /// Simple service protocol for the "event_store.client.operations.Operations" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    public protocol SimpleServiceProtocol: EventStore_Client_Operations_Operations.ServiceProtocol {
        /// Handle the "StartScavenge" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_Operations_StartScavengeReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Operations_ScavengeResp` to respond with.
        func startScavenge(
            request: EventStore_Client_Operations_StartScavengeReq,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Operations_ScavengeResp

        /// Handle the "StopScavenge" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_Operations_StopScavengeReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Operations_ScavengeResp` to respond with.
        func stopScavenge(
            request: EventStore_Client_Operations_StopScavengeReq,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Operations_ScavengeResp

        /// Handle the "Shutdown" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_Empty` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Empty` to respond with.
        func shutdown(
            request: EventStore_Client_Empty,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Empty

        /// Handle the "MergeIndexes" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_Empty` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Empty` to respond with.
        func mergeIndexes(
            request: EventStore_Client_Empty,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Empty

        /// Handle the "ResignNode" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_Empty` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Empty` to respond with.
        func resignNode(
            request: EventStore_Client_Empty,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Empty

        /// Handle the "SetNodePriority" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_Operations_SetNodePriorityReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Empty` to respond with.
        func setNodePriority(
            request: EventStore_Client_Operations_SetNodePriorityReq,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Empty

        /// Handle the "RestartPersistentSubscriptions" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_Empty` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Empty` to respond with.
        func restartPersistentSubscriptions(
            request: EventStore_Client_Empty,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Empty
    }
}

// Default implementation of 'registerMethods(with:)'.
extension EventStore_Client_Operations_Operations.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: EventStore_Client_Operations_Operations.Method.StartScavenge.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Operations_StartScavengeReq>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Operations_ScavengeResp>(),
            handler: { request, context in
                try await self.startScavenge(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Client_Operations_Operations.Method.StopScavenge.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Operations_StopScavengeReq>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Operations_ScavengeResp>(),
            handler: { request, context in
                try await self.stopScavenge(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Client_Operations_Operations.Method.Shutdown.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Empty>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Empty>(),
            handler: { request, context in
                try await self.shutdown(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Client_Operations_Operations.Method.MergeIndexes.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Empty>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Empty>(),
            handler: { request, context in
                try await self.mergeIndexes(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Client_Operations_Operations.Method.ResignNode.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Empty>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Empty>(),
            handler: { request, context in
                try await self.resignNode(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Client_Operations_Operations.Method.SetNodePriority.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Operations_SetNodePriorityReq>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Empty>(),
            handler: { request, context in
                try await self.setNodePriority(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Client_Operations_Operations.Method.RestartPersistentSubscriptions.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Empty>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Empty>(),
            handler: { request, context in
                try await self.restartPersistentSubscriptions(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension EventStore_Client_Operations_Operations.ServiceProtocol {
    public func startScavenge(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_Operations_StartScavengeReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Operations_ScavengeResp> {
        let response = try await self.startScavenge(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func stopScavenge(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_Operations_StopScavengeReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Operations_ScavengeResp> {
        let response = try await self.stopScavenge(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func shutdown(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_Empty>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty> {
        let response = try await self.shutdown(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func mergeIndexes(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_Empty>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty> {
        let response = try await self.mergeIndexes(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func resignNode(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_Empty>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty> {
        let response = try await self.resignNode(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func setNodePriority(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_Operations_SetNodePriorityReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty> {
        let response = try await self.setNodePriority(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func restartPersistentSubscriptions(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_Empty>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Empty> {
        let response = try await self.restartPersistentSubscriptions(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension EventStore_Client_Operations_Operations.SimpleServiceProtocol {
    public func startScavenge(
        request: GRPCCore.ServerRequest<EventStore_Client_Operations_StartScavengeReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Operations_ScavengeResp> {
        return GRPCCore.ServerResponse<EventStore_Client_Operations_ScavengeResp>(
            message: try await self.startScavenge(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func stopScavenge(
        request: GRPCCore.ServerRequest<EventStore_Client_Operations_StopScavengeReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Operations_ScavengeResp> {
        return GRPCCore.ServerResponse<EventStore_Client_Operations_ScavengeResp>(
            message: try await self.stopScavenge(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func shutdown(
        request: GRPCCore.ServerRequest<EventStore_Client_Empty>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty> {
        return GRPCCore.ServerResponse<EventStore_Client_Empty>(
            message: try await self.shutdown(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func mergeIndexes(
        request: GRPCCore.ServerRequest<EventStore_Client_Empty>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty> {
        return GRPCCore.ServerResponse<EventStore_Client_Empty>(
            message: try await self.mergeIndexes(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func resignNode(
        request: GRPCCore.ServerRequest<EventStore_Client_Empty>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty> {
        return GRPCCore.ServerResponse<EventStore_Client_Empty>(
            message: try await self.resignNode(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func setNodePriority(
        request: GRPCCore.ServerRequest<EventStore_Client_Operations_SetNodePriorityReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty> {
        return GRPCCore.ServerResponse<EventStore_Client_Empty>(
            message: try await self.setNodePriority(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func restartPersistentSubscriptions(
        request: GRPCCore.ServerRequest<EventStore_Client_Empty>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Empty> {
        return GRPCCore.ServerResponse<EventStore_Client_Empty>(
            message: try await self.restartPersistentSubscriptions(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: event_store.client.operations.Operations (client)

extension EventStore_Client_Operations_Operations {
    /// Generated client protocol for the "event_store.client.operations.Operations" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    public protocol ClientProtocol: Sendable {
        /// Call the "StartScavenge" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Operations_StartScavengeReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Operations_StartScavengeReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Operations_ScavengeResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func startScavenge<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Operations_StartScavengeReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Operations_StartScavengeReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Operations_ScavengeResp>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Operations_ScavengeResp>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "StopScavenge" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Operations_StopScavengeReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Operations_StopScavengeReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Operations_ScavengeResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func stopScavenge<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Operations_StopScavengeReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Operations_StopScavengeReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Operations_ScavengeResp>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Operations_ScavengeResp>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Shutdown" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Empty` message.
        ///   - serializer: A serializer for `EventStore_Client_Empty` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func shutdown<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Empty>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Empty>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "MergeIndexes" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Empty` message.
        ///   - serializer: A serializer for `EventStore_Client_Empty` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func mergeIndexes<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Empty>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Empty>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ResignNode" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Empty` message.
        ///   - serializer: A serializer for `EventStore_Client_Empty` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func resignNode<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Empty>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Empty>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SetNodePriority" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Operations_SetNodePriorityReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Operations_SetNodePriorityReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func setNodePriority<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Operations_SetNodePriorityReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Operations_SetNodePriorityReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RestartPersistentSubscriptions" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Empty` message.
        ///   - serializer: A serializer for `EventStore_Client_Empty` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func restartPersistentSubscriptions<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Empty>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Empty>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "event_store.client.operations.Operations" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "StartScavenge" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Operations_StartScavengeReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Operations_StartScavengeReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Operations_ScavengeResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func startScavenge<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Operations_StartScavengeReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Operations_StartScavengeReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Operations_ScavengeResp>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Operations_ScavengeResp>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Client_Operations_Operations.Method.StartScavenge.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "StopScavenge" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Operations_StopScavengeReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Operations_StopScavengeReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Operations_ScavengeResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func stopScavenge<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Operations_StopScavengeReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Operations_StopScavengeReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Operations_ScavengeResp>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Operations_ScavengeResp>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Client_Operations_Operations.Method.StopScavenge.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Shutdown" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Empty` message.
        ///   - serializer: A serializer for `EventStore_Client_Empty` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func shutdown<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Empty>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Empty>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Client_Operations_Operations.Method.Shutdown.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "MergeIndexes" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Empty` message.
        ///   - serializer: A serializer for `EventStore_Client_Empty` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func mergeIndexes<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Empty>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Empty>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Client_Operations_Operations.Method.MergeIndexes.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ResignNode" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Empty` message.
        ///   - serializer: A serializer for `EventStore_Client_Empty` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func resignNode<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Empty>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Empty>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Client_Operations_Operations.Method.ResignNode.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SetNodePriority" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Operations_SetNodePriorityReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Operations_SetNodePriorityReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func setNodePriority<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Operations_SetNodePriorityReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Operations_SetNodePriorityReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Client_Operations_Operations.Method.SetNodePriority.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RestartPersistentSubscriptions" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Empty` message.
        ///   - serializer: A serializer for `EventStore_Client_Empty` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func restartPersistentSubscriptions<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Empty>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Empty>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Client_Operations_Operations.Method.RestartPersistentSubscriptions.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension EventStore_Client_Operations_Operations.ClientProtocol {
    /// Call the "StartScavenge" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_Operations_StartScavengeReq` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func startScavenge<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_Operations_StartScavengeReq>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Operations_ScavengeResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.startScavenge(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Operations_StartScavengeReq>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Operations_ScavengeResp>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StopScavenge" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_Operations_StopScavengeReq` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func stopScavenge<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_Operations_StopScavengeReq>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Operations_ScavengeResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.stopScavenge(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Operations_StopScavengeReq>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Operations_ScavengeResp>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Shutdown" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_Empty` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func shutdown<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.shutdown(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Empty>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "MergeIndexes" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_Empty` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func mergeIndexes<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.mergeIndexes(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Empty>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ResignNode" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_Empty` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func resignNode<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.resignNode(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Empty>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetNodePriority" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_Operations_SetNodePriorityReq` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func setNodePriority<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_Operations_SetNodePriorityReq>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.setNodePriority(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Operations_SetNodePriorityReq>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RestartPersistentSubscriptions" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_Empty` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func restartPersistentSubscriptions<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.restartPersistentSubscriptions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Empty>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension EventStore_Client_Operations_Operations.ClientProtocol {
    /// Call the "StartScavenge" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func startScavenge<Result>(
        _ message: EventStore_Client_Operations_StartScavengeReq,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Operations_ScavengeResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_Operations_StartScavengeReq>(
            message: message,
            metadata: metadata
        )
        return try await self.startScavenge(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StopScavenge" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func stopScavenge<Result>(
        _ message: EventStore_Client_Operations_StopScavengeReq,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Operations_ScavengeResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_Operations_StopScavengeReq>(
            message: message,
            metadata: metadata
        )
        return try await self.stopScavenge(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Shutdown" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func shutdown<Result>(
        _ message: EventStore_Client_Empty,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_Empty>(
            message: message,
            metadata: metadata
        )
        return try await self.shutdown(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "MergeIndexes" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func mergeIndexes<Result>(
        _ message: EventStore_Client_Empty,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_Empty>(
            message: message,
            metadata: metadata
        )
        return try await self.mergeIndexes(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ResignNode" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func resignNode<Result>(
        _ message: EventStore_Client_Empty,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_Empty>(
            message: message,
            metadata: metadata
        )
        return try await self.resignNode(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetNodePriority" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func setNodePriority<Result>(
        _ message: EventStore_Client_Operations_SetNodePriorityReq,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_Operations_SetNodePriorityReq>(
            message: message,
            metadata: metadata
        )
        return try await self.setNodePriority(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RestartPersistentSubscriptions" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func restartPersistentSubscriptions<Result>(
        _ message: EventStore_Client_Empty,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_Empty>(
            message: message,
            metadata: metadata
        )
        return try await self.restartPersistentSubscriptions(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}