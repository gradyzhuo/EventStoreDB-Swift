// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: users.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - event_store.client.users.Users

/// Namespace containing generated types for the "event_store.client.users.Users" service.
package enum EventStore_Client_Users_Users {
    /// Service descriptor for the "event_store.client.users.Users" service.
    package static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.users.Users")
    /// Namespace for method metadata.
    package enum Method {
        /// Namespace for "Create" metadata.
        package enum Create {
            /// Request type for "Create".
            package typealias Input = EventStore_Client_Users_CreateReq
            /// Response type for "Create".
            package typealias Output = EventStore_Client_Users_CreateResp
            /// Descriptor for "Create".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.users.Users"),
                method: "Create"
            )
        }
        /// Namespace for "Update" metadata.
        package enum Update {
            /// Request type for "Update".
            package typealias Input = EventStore_Client_Users_UpdateReq
            /// Response type for "Update".
            package typealias Output = EventStore_Client_Users_UpdateResp
            /// Descriptor for "Update".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.users.Users"),
                method: "Update"
            )
        }
        /// Namespace for "Delete" metadata.
        package enum Delete {
            /// Request type for "Delete".
            package typealias Input = EventStore_Client_Users_DeleteReq
            /// Response type for "Delete".
            package typealias Output = EventStore_Client_Users_DeleteResp
            /// Descriptor for "Delete".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.users.Users"),
                method: "Delete"
            )
        }
        /// Namespace for "Disable" metadata.
        package enum Disable {
            /// Request type for "Disable".
            package typealias Input = EventStore_Client_Users_DisableReq
            /// Response type for "Disable".
            package typealias Output = EventStore_Client_Users_DisableResp
            /// Descriptor for "Disable".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.users.Users"),
                method: "Disable"
            )
        }
        /// Namespace for "Enable" metadata.
        package enum Enable {
            /// Request type for "Enable".
            package typealias Input = EventStore_Client_Users_EnableReq
            /// Response type for "Enable".
            package typealias Output = EventStore_Client_Users_EnableResp
            /// Descriptor for "Enable".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.users.Users"),
                method: "Enable"
            )
        }
        /// Namespace for "Details" metadata.
        package enum Details {
            /// Request type for "Details".
            package typealias Input = EventStore_Client_Users_DetailsReq
            /// Response type for "Details".
            package typealias Output = EventStore_Client_Users_DetailsResp
            /// Descriptor for "Details".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.users.Users"),
                method: "Details"
            )
        }
        /// Namespace for "ChangePassword" metadata.
        package enum ChangePassword {
            /// Request type for "ChangePassword".
            package typealias Input = EventStore_Client_Users_ChangePasswordReq
            /// Response type for "ChangePassword".
            package typealias Output = EventStore_Client_Users_ChangePasswordResp
            /// Descriptor for "ChangePassword".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.users.Users"),
                method: "ChangePassword"
            )
        }
        /// Namespace for "ResetPassword" metadata.
        package enum ResetPassword {
            /// Request type for "ResetPassword".
            package typealias Input = EventStore_Client_Users_ResetPasswordReq
            /// Response type for "ResetPassword".
            package typealias Output = EventStore_Client_Users_ResetPasswordResp
            /// Descriptor for "ResetPassword".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.users.Users"),
                method: "ResetPassword"
            )
        }
        /// Descriptors for all methods in the "event_store.client.users.Users" service.
        package static let descriptors: [GRPCCore.MethodDescriptor] = [
            Create.descriptor,
            Update.descriptor,
            Delete.descriptor,
            Disable.descriptor,
            Enable.descriptor,
            Details.descriptor,
            ChangePassword.descriptor,
            ResetPassword.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "event_store.client.users.Users" service.
    package static let eventStore_client_users_Users = GRPCCore.ServiceDescriptor(fullyQualifiedService: "event_store.client.users.Users")
}

// MARK: event_store.client.users.Users (server)

extension EventStore_Client_Users_Users {
    /// Streaming variant of the service protocol for the "event_store.client.users.Users" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    package protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "Create" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_Users_CreateReq` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Users_CreateResp` messages.
        func create(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_Users_CreateReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Users_CreateResp>

        /// Handle the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_Users_UpdateReq` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Users_UpdateResp` messages.
        func update(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_Users_UpdateReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Users_UpdateResp>

        /// Handle the "Delete" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_Users_DeleteReq` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Users_DeleteResp` messages.
        func delete(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_Users_DeleteReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Users_DeleteResp>

        /// Handle the "Disable" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_Users_DisableReq` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Users_DisableResp` messages.
        func disable(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_Users_DisableReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Users_DisableResp>

        /// Handle the "Enable" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_Users_EnableReq` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Users_EnableResp` messages.
        func enable(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_Users_EnableReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Users_EnableResp>

        /// Handle the "Details" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_Users_DetailsReq` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Users_DetailsResp` messages.
        func details(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_Users_DetailsReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Users_DetailsResp>

        /// Handle the "ChangePassword" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_Users_ChangePasswordReq` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Users_ChangePasswordResp` messages.
        func changePassword(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_Users_ChangePasswordReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Users_ChangePasswordResp>

        /// Handle the "ResetPassword" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `EventStore_Client_Users_ResetPasswordReq` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Users_ResetPasswordResp` messages.
        func resetPassword(
            request: GRPCCore.StreamingServerRequest<EventStore_Client_Users_ResetPasswordReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Users_ResetPasswordResp>
    }

    /// Service protocol for the "event_store.client.users.Users" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    package protocol ServiceProtocol: EventStore_Client_Users_Users.StreamingServiceProtocol {
        /// Handle the "Create" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_CreateReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Users_CreateResp` message.
        func create(
            request: GRPCCore.ServerRequest<EventStore_Client_Users_CreateReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Users_CreateResp>

        /// Handle the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_UpdateReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Users_UpdateResp` message.
        func update(
            request: GRPCCore.ServerRequest<EventStore_Client_Users_UpdateReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Users_UpdateResp>

        /// Handle the "Delete" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_DeleteReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Users_DeleteResp` message.
        func delete(
            request: GRPCCore.ServerRequest<EventStore_Client_Users_DeleteReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Users_DeleteResp>

        /// Handle the "Disable" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_DisableReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Users_DisableResp` message.
        func disable(
            request: GRPCCore.ServerRequest<EventStore_Client_Users_DisableReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Users_DisableResp>

        /// Handle the "Enable" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_EnableReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Users_EnableResp` message.
        func enable(
            request: GRPCCore.ServerRequest<EventStore_Client_Users_EnableReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Users_EnableResp>

        /// Handle the "Details" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_DetailsReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `EventStore_Client_Users_DetailsResp` messages.
        func details(
            request: GRPCCore.ServerRequest<EventStore_Client_Users_DetailsReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Users_DetailsResp>

        /// Handle the "ChangePassword" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_ChangePasswordReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Users_ChangePasswordResp` message.
        func changePassword(
            request: GRPCCore.ServerRequest<EventStore_Client_Users_ChangePasswordReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Users_ChangePasswordResp>

        /// Handle the "ResetPassword" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_ResetPasswordReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `EventStore_Client_Users_ResetPasswordResp` message.
        func resetPassword(
            request: GRPCCore.ServerRequest<EventStore_Client_Users_ResetPasswordReq>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Users_ResetPasswordResp>
    }

    /// Simple service protocol for the "event_store.client.users.Users" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    package protocol SimpleServiceProtocol: EventStore_Client_Users_Users.ServiceProtocol {
        /// Handle the "Create" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_Users_CreateReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Users_CreateResp` to respond with.
        func create(
            request: EventStore_Client_Users_CreateReq,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Users_CreateResp

        /// Handle the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_Users_UpdateReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Users_UpdateResp` to respond with.
        func update(
            request: EventStore_Client_Users_UpdateReq,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Users_UpdateResp

        /// Handle the "Delete" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_Users_DeleteReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Users_DeleteResp` to respond with.
        func delete(
            request: EventStore_Client_Users_DeleteReq,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Users_DeleteResp

        /// Handle the "Disable" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_Users_DisableReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Users_DisableResp` to respond with.
        func disable(
            request: EventStore_Client_Users_DisableReq,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Users_DisableResp

        /// Handle the "Enable" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_Users_EnableReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Users_EnableResp` to respond with.
        func enable(
            request: EventStore_Client_Users_EnableReq,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Users_EnableResp

        /// Handle the "Details" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_Users_DetailsReq` message.
        ///   - response: A response stream of `EventStore_Client_Users_DetailsResp` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func details(
            request: EventStore_Client_Users_DetailsReq,
            response: GRPCCore.RPCWriter<EventStore_Client_Users_DetailsResp>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "ChangePassword" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_Users_ChangePasswordReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Users_ChangePasswordResp` to respond with.
        func changePassword(
            request: EventStore_Client_Users_ChangePasswordReq,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Users_ChangePasswordResp

        /// Handle the "ResetPassword" method.
        ///
        /// - Parameters:
        ///   - request: A `EventStore_Client_Users_ResetPasswordReq` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `EventStore_Client_Users_ResetPasswordResp` to respond with.
        func resetPassword(
            request: EventStore_Client_Users_ResetPasswordReq,
            context: GRPCCore.ServerContext
        ) async throws -> EventStore_Client_Users_ResetPasswordResp
    }
}

// Default implementation of 'registerMethods(with:)'.
extension EventStore_Client_Users_Users.StreamingServiceProtocol {
    package func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: EventStore_Client_Users_Users.Method.Create.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Users_CreateReq>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Users_CreateResp>(),
            handler: { request, context in
                try await self.create(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Client_Users_Users.Method.Update.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Users_UpdateReq>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Users_UpdateResp>(),
            handler: { request, context in
                try await self.update(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Client_Users_Users.Method.Delete.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Users_DeleteReq>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Users_DeleteResp>(),
            handler: { request, context in
                try await self.delete(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Client_Users_Users.Method.Disable.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Users_DisableReq>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Users_DisableResp>(),
            handler: { request, context in
                try await self.disable(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Client_Users_Users.Method.Enable.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Users_EnableReq>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Users_EnableResp>(),
            handler: { request, context in
                try await self.enable(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Client_Users_Users.Method.Details.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Users_DetailsReq>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Users_DetailsResp>(),
            handler: { request, context in
                try await self.details(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Client_Users_Users.Method.ChangePassword.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Users_ChangePasswordReq>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Users_ChangePasswordResp>(),
            handler: { request, context in
                try await self.changePassword(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: EventStore_Client_Users_Users.Method.ResetPassword.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Users_ResetPasswordReq>(),
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Users_ResetPasswordResp>(),
            handler: { request, context in
                try await self.resetPassword(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension EventStore_Client_Users_Users.ServiceProtocol {
    package func create(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_Users_CreateReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Users_CreateResp> {
        let response = try await self.create(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    package func update(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_Users_UpdateReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Users_UpdateResp> {
        let response = try await self.update(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    package func delete(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_Users_DeleteReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Users_DeleteResp> {
        let response = try await self.delete(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    package func disable(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_Users_DisableReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Users_DisableResp> {
        let response = try await self.disable(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    package func enable(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_Users_EnableReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Users_EnableResp> {
        let response = try await self.enable(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    package func details(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_Users_DetailsReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Users_DetailsResp> {
        let response = try await self.details(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return response
    }

    package func changePassword(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_Users_ChangePasswordReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Users_ChangePasswordResp> {
        let response = try await self.changePassword(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    package func resetPassword(
        request: GRPCCore.StreamingServerRequest<EventStore_Client_Users_ResetPasswordReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Users_ResetPasswordResp> {
        let response = try await self.resetPassword(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension EventStore_Client_Users_Users.SimpleServiceProtocol {
    package func create(
        request: GRPCCore.ServerRequest<EventStore_Client_Users_CreateReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Users_CreateResp> {
        return GRPCCore.ServerResponse<EventStore_Client_Users_CreateResp>(
            message: try await self.create(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    package func update(
        request: GRPCCore.ServerRequest<EventStore_Client_Users_UpdateReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Users_UpdateResp> {
        return GRPCCore.ServerResponse<EventStore_Client_Users_UpdateResp>(
            message: try await self.update(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    package func delete(
        request: GRPCCore.ServerRequest<EventStore_Client_Users_DeleteReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Users_DeleteResp> {
        return GRPCCore.ServerResponse<EventStore_Client_Users_DeleteResp>(
            message: try await self.delete(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    package func disable(
        request: GRPCCore.ServerRequest<EventStore_Client_Users_DisableReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Users_DisableResp> {
        return GRPCCore.ServerResponse<EventStore_Client_Users_DisableResp>(
            message: try await self.disable(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    package func enable(
        request: GRPCCore.ServerRequest<EventStore_Client_Users_EnableReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Users_EnableResp> {
        return GRPCCore.ServerResponse<EventStore_Client_Users_EnableResp>(
            message: try await self.enable(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    package func details(
        request: GRPCCore.ServerRequest<EventStore_Client_Users_DetailsReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<EventStore_Client_Users_DetailsResp> {
        return GRPCCore.StreamingServerResponse<EventStore_Client_Users_DetailsResp>(
            metadata: [:],
            producer: { writer in
                try await self.details(
                    request: request.message,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    package func changePassword(
        request: GRPCCore.ServerRequest<EventStore_Client_Users_ChangePasswordReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Users_ChangePasswordResp> {
        return GRPCCore.ServerResponse<EventStore_Client_Users_ChangePasswordResp>(
            message: try await self.changePassword(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    package func resetPassword(
        request: GRPCCore.ServerRequest<EventStore_Client_Users_ResetPasswordReq>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<EventStore_Client_Users_ResetPasswordResp> {
        return GRPCCore.ServerResponse<EventStore_Client_Users_ResetPasswordResp>(
            message: try await self.resetPassword(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: event_store.client.users.Users (client)

extension EventStore_Client_Users_Users {
    /// Generated client protocol for the "event_store.client.users.Users" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    package protocol ClientProtocol: Sendable {
        /// Call the "Create" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_CreateReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Users_CreateReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Users_CreateResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func create<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Users_CreateReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Users_CreateReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Users_CreateResp>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_CreateResp>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_UpdateReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Users_UpdateReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Users_UpdateResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func update<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Users_UpdateReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Users_UpdateReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Users_UpdateResp>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_UpdateResp>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Delete" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_DeleteReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Users_DeleteReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Users_DeleteResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func delete<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Users_DeleteReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Users_DeleteReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Users_DeleteResp>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_DeleteResp>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Disable" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_DisableReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Users_DisableReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Users_DisableResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func disable<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Users_DisableReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Users_DisableReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Users_DisableResp>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_DisableResp>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Enable" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_EnableReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Users_EnableReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Users_EnableResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func enable<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Users_EnableReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Users_EnableReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Users_EnableResp>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_EnableResp>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Details" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_DetailsReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Users_DetailsReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Users_DetailsResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func details<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Users_DetailsReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Users_DetailsReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Users_DetailsResp>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<EventStore_Client_Users_DetailsResp>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ChangePassword" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_ChangePasswordReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Users_ChangePasswordReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Users_ChangePasswordResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func changePassword<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Users_ChangePasswordReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Users_ChangePasswordReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Users_ChangePasswordResp>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_ChangePasswordResp>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ResetPassword" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_ResetPasswordReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Users_ResetPasswordReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Users_ResetPasswordResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func resetPassword<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Users_ResetPasswordReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Users_ResetPasswordReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Users_ResetPasswordResp>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_ResetPasswordResp>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "event_store.client.users.Users" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    package struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        package init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "Create" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_CreateReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Users_CreateReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Users_CreateResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func create<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Users_CreateReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Users_CreateReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Users_CreateResp>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_CreateResp>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Client_Users_Users.Method.Create.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_UpdateReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Users_UpdateReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Users_UpdateResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func update<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Users_UpdateReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Users_UpdateReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Users_UpdateResp>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_UpdateResp>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Client_Users_Users.Method.Update.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Delete" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_DeleteReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Users_DeleteReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Users_DeleteResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func delete<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Users_DeleteReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Users_DeleteReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Users_DeleteResp>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_DeleteResp>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Client_Users_Users.Method.Delete.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Disable" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_DisableReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Users_DisableReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Users_DisableResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func disable<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Users_DisableReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Users_DisableReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Users_DisableResp>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_DisableResp>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Client_Users_Users.Method.Disable.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Enable" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_EnableReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Users_EnableReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Users_EnableResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func enable<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Users_EnableReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Users_EnableReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Users_EnableResp>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_EnableResp>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Client_Users_Users.Method.Enable.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Details" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_DetailsReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Users_DetailsReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Users_DetailsResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func details<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Users_DetailsReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Users_DetailsReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Users_DetailsResp>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<EventStore_Client_Users_DetailsResp>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: EventStore_Client_Users_Users.Method.Details.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ChangePassword" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_ChangePasswordReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Users_ChangePasswordReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Users_ChangePasswordResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func changePassword<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Users_ChangePasswordReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Users_ChangePasswordReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Users_ChangePasswordResp>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_ChangePasswordResp>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Client_Users_Users.Method.ChangePassword.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ResetPassword" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `EventStore_Client_Users_ResetPasswordReq` message.
        ///   - serializer: A serializer for `EventStore_Client_Users_ResetPasswordReq` messages.
        ///   - deserializer: A deserializer for `EventStore_Client_Users_ResetPasswordResp` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func resetPassword<Result>(
            request: GRPCCore.ClientRequest<EventStore_Client_Users_ResetPasswordReq>,
            serializer: some GRPCCore.MessageSerializer<EventStore_Client_Users_ResetPasswordReq>,
            deserializer: some GRPCCore.MessageDeserializer<EventStore_Client_Users_ResetPasswordResp>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_ResetPasswordResp>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: EventStore_Client_Users_Users.Method.ResetPassword.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension EventStore_Client_Users_Users.ClientProtocol {
    /// Call the "Create" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_Users_CreateReq` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func create<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_Users_CreateReq>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_CreateResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.create(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Users_CreateReq>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Users_CreateResp>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Update" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_Users_UpdateReq` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func update<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_Users_UpdateReq>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_UpdateResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.update(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Users_UpdateReq>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Users_UpdateResp>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Delete" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_Users_DeleteReq` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func delete<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_Users_DeleteReq>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_DeleteResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.delete(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Users_DeleteReq>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Users_DeleteResp>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Disable" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_Users_DisableReq` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func disable<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_Users_DisableReq>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_DisableResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.disable(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Users_DisableReq>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Users_DisableResp>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Enable" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_Users_EnableReq` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func enable<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_Users_EnableReq>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_EnableResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.enable(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Users_EnableReq>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Users_EnableResp>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Details" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_Users_DetailsReq` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func details<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_Users_DetailsReq>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<EventStore_Client_Users_DetailsResp>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.details(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Users_DetailsReq>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Users_DetailsResp>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ChangePassword" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_Users_ChangePasswordReq` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func changePassword<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_Users_ChangePasswordReq>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_ChangePasswordResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.changePassword(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Users_ChangePasswordReq>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Users_ChangePasswordResp>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ResetPassword" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `EventStore_Client_Users_ResetPasswordReq` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func resetPassword<Result>(
        request: GRPCCore.ClientRequest<EventStore_Client_Users_ResetPasswordReq>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_ResetPasswordResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.resetPassword(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<EventStore_Client_Users_ResetPasswordReq>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<EventStore_Client_Users_ResetPasswordResp>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension EventStore_Client_Users_Users.ClientProtocol {
    /// Call the "Create" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func create<Result>(
        _ message: EventStore_Client_Users_CreateReq,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_CreateResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_Users_CreateReq>(
            message: message,
            metadata: metadata
        )
        return try await self.create(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Update" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func update<Result>(
        _ message: EventStore_Client_Users_UpdateReq,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_UpdateResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_Users_UpdateReq>(
            message: message,
            metadata: metadata
        )
        return try await self.update(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Delete" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func delete<Result>(
        _ message: EventStore_Client_Users_DeleteReq,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_DeleteResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_Users_DeleteReq>(
            message: message,
            metadata: metadata
        )
        return try await self.delete(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Disable" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func disable<Result>(
        _ message: EventStore_Client_Users_DisableReq,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_DisableResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_Users_DisableReq>(
            message: message,
            metadata: metadata
        )
        return try await self.disable(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Enable" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func enable<Result>(
        _ message: EventStore_Client_Users_EnableReq,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_EnableResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_Users_EnableReq>(
            message: message,
            metadata: metadata
        )
        return try await self.enable(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Details" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func details<Result>(
        _ message: EventStore_Client_Users_DetailsReq,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<EventStore_Client_Users_DetailsResp>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_Users_DetailsReq>(
            message: message,
            metadata: metadata
        )
        return try await self.details(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ChangePassword" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func changePassword<Result>(
        _ message: EventStore_Client_Users_ChangePasswordReq,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_ChangePasswordResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_Users_ChangePasswordReq>(
            message: message,
            metadata: metadata
        )
        return try await self.changePassword(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ResetPassword" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func resetPassword<Result>(
        _ message: EventStore_Client_Users_ResetPasswordReq,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<EventStore_Client_Users_ResetPasswordResp>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<EventStore_Client_Users_ResetPasswordReq>(
            message: message,
            metadata: metadata
        )
        return try await self.resetPassword(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}